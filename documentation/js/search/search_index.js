var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.046,1,1.822]],["body/modules/AppModule.html",[0,1.513,1,3.387,2,1.143,3,1.143,4,1.429,5,1.429,6,1.143,7,2.015,8,1.429,9,2.154,10,2.154,11,2.774,12,0.041,13,2.774,14,2.774,15,2.015,16,1.429,17,1.275,18,0.364,19,0.313,20,0.313,21,2.624,22,3.038,23,0.834,24,0.537,25,2.624,26,2.624,27,2.624,28,2.624,29,1.429,30,2.015,31,2.624,32,2.154,33,2.624,34,2.154,35,2.624,36,2.624,37,1.429,38,2.624,39,2.624,40,2.624,41,2.624,42,2.624,43,2.624,44,1.275,45,0.364,46,0.093,47,0.025,48,0.025]],["title/classes/Auth.html",[46,0.105,49,1.822]],["body/classes/Auth.html",[12,0.037,18,0.6,19,0.516,20,0.516,45,0.6,46,0.153,47,0.035,48,0.035,49,3.149,50,2.356,51,3.552]],["title/controllers/AuthController.html",[52,1.613,53,1.822]],["body/controllers/AuthController.html",[12,0.041,18,0.366,19,0.314,20,0.314,23,0.813,24,0.539,44,1.28,45,0.366,46,0.093,47,0.025,48,0.025,49,1.62,52,1.434,53,2.282,54,2.162,55,2.162,56,0.605,57,1.617,58,3.02,59,3.046,60,2.634,61,2.6,62,2.282,63,2.634,64,1.061,65,2.634,66,1.454,67,1.179,68,0.853,69,1.454,70,1.617,71,2.162,72,2.54,73,3.711,74,2.634,75,2.021,76,2.162,77,2.162,78,2.162,79,2.088,80,2.162,81,1.62,82,2.162,83,1.852,84,1.434,85,2.162,86,2.634,87,1.852,88,2.162,89,2.634,90,1.31,91,2.634,92,2.162,93,2.634,94,2.634]],["title/modules/AuthModule.html",[0,1.046,11,1.613]],["body/modules/AuthModule.html",[0,1.632,2,1.32,3,1.32,4,1.649,5,1.649,6,1.32,7,2.518,8,1.649,11,3.014,12,0.04,15,2.225,16,1.649,17,1.472,18,0.42,19,0.361,20,0.361,22,2.487,23,0.824,24,0.62,44,1.986,45,0.42,46,0.107,47,0.028,48,0.028,53,2.843,79,2.588,80,2.487,95,2.487,96,2.487,97,2.588,98,3.029,99,3.029,100,3.029,101,2.129,102,3.029,103,3.029]],["title/classes/AuthPayloadDto.html",[46,0.105,72,1.613]],["body/classes/AuthPayloadDto.html",[12,0.039,18,0.477,19,0.41,20,0.41,23,0.548,45,0.477,46,0.157,47,0.03,48,0.03,50,1.87,56,0.789,62,2.73,64,1.27,68,1.02,72,2.417,104,2.82,105,2.417,106,2.391,107,2.144,108,2.266,109,2.82,110,3.435,111,3.435,112,3.435,113,3.645,114,4.038,115,3.645,116,2.112]],["title/injectables/AuthService.html",[79,1.44,117,0.681]],["body/injectables/AuthService.html",[12,0.041,18,0.274,19,0.235,20,0.235,23,0.734,24,0.404,29,1.074,45,0.274,46,0.07,47,0.02,48,0.02,56,0.453,57,1.308,59,2.463,61,1.458,64,1.039,66,1.424,67,1.155,68,0.835,69,1.424,70,1.308,71,2.463,72,2.211,75,1.978,79,1.458,81,1.212,90,1.059,101,1.386,106,2.236,107,1.308,108,1.769,117,0.689,118,0.958,119,1.619,120,2.236,121,3.001,122,1.308,123,1.619,124,1.291,125,2.234,126,2.496,127,2.234,128,4.06,129,1.972,130,1.458,131,3.001,132,1.978,133,1.972,134,3.001,135,2.463,136,1.972,137,1.212,138,1.386,139,1.074,140,1.619,141,1.386,142,2.234,143,2.236,144,1.978,145,1.212,146,2.109,147,1.845,148,1.619,149,1.972,150,3.001,151,1.972,152,1.972,153,1.972,154,1.972,155,1.972,156,1.386,157,3.001,158,1.972,159,1.972,160,3.001,161,1.972,162,1.972,163,1.972]],["title/classes/IsPasswordPolicy.html",[30,1.613,46,0.105]],["body/classes/IsPasswordPolicy.html",[12,0.039,18,0.389,19,0.334,20,0.334,23,0.446,30,2.417,45,0.389,46,0.137,47,0.026,48,0.026,50,1.525,56,0.643,57,1.688,64,1.107,66,1.518,67,1.411,68,0.89,69,1.518,70,1.688,90,1.367,107,1.688,108,2.087,116,1.722,120,1.361,132,1.525,164,3.12,165,2.299,166,3.179,167,4.439,168,3.872,169,2.722,170,3.872,171,5.33,172,2.8,173,4.789,174,3.872,175,2.8,176,3.872,177,1.968,178,2.8,179,2.8,180,2.8,181,2.299,182,2.8,183,2.8,184,2.8,185,2.8,186,2.8,187,2.8]],["title/injectables/JwtGuard.html",[84,1.613,117,0.681]],["body/injectables/JwtGuard.html",[12,0.04,18,0.519,19,0.447,20,0.447,23,0.748,24,0.766,45,0.519,46,0.133,47,0.032,48,0.032,64,1.07,84,2.554,117,1.077,118,1.819,122,2.232,188,3.073,189,2.883,190,4.689,191,3.743,192,3.743,193,2.302,194,2.302]],["title/injectables/JwtStrategy.html",[97,1.44,117,0.681]],["body/injectables/JwtStrategy.html",[12,0.041,18,0.31,19,0.267,20,0.267,23,0.769,24,0.458,29,1.218,37,2.627,45,0.31,46,0.079,47,0.022,48,0.022,56,0.514,57,1.437,61,1.904,64,0.943,66,1.292,67,1.374,68,0.758,69,1.292,70,0.975,75,1.218,90,1.164,97,1.603,106,1.603,107,0.975,108,1.437,117,0.758,118,1.087,120,1.904,122,1.437,124,1.374,125,2.028,126,2.658,127,1.375,130,1.904,132,1.218,137,1.375,139,1.218,142,1.375,143,1.087,144,1.218,145,1.375,156,1.572,169,2.318,177,1.572,189,2.028,193,1.375,194,1.375,195,1.572,196,2.707,197,1.836,198,2.236,199,2.707,200,2.658,201,2.236,202,1.836,203,1.836,204,1.836,205,1.572,206,0.975,207,1.836,208,1.218,209,1.836,210,1.836,211,1.836,212,1.836,213,2.754,214,1.836,215,2.707,216,1.375,217,1.572,218,1.836]],["title/guards/OnlyAuthorizedRoleGuard.html",[219,2.083,220,1.822]],["body/guards/OnlyAuthorizedRoleGuard.html",[12,0.041,18,0.29,19,0.249,20,0.249,23,0.667,24,0.428,37,2.049,45,0.29,46,0.074,47,0.021,48,0.021,56,0.48,57,1.366,61,1.523,64,0.896,66,1.229,67,0.996,68,0.72,69,1.229,70,0.91,90,1.106,117,0.72,120,1.828,122,1.366,124,1.329,130,1.828,135,2.573,138,1.469,139,1.138,142,1.928,143,2.177,144,1.138,145,1.285,146,2.204,147,1.928,166,1.715,181,3.089,213,1.469,217,1.469,220,1.928,221,2.089,222,2.645,223,3.307,224,2.645,225,1.715,226,4.181,227,2.089,228,4.705,229,2.089,230,3.135,231,3.432,232,2.089,233,2.089,234,1.715,235,2.204,236,1.285,237,1.285,238,1.715,239,4.181,240,2.089,241,2.089,242,1.715,243,2.089,244,1.715,245,3.135,246,1.715,247,2.089,248,2.089,249,2.089,250,2.573,251,1.928,252,2.089,253,2.089,254,2.089,255,2.089]],["title/modules/PrismaModule.html",[0,1.046,13,1.613]],["body/modules/PrismaModule.html",[0,1.695,2,1.423,3,1.423,4,1.779,5,1.779,6,1.423,7,2.614,8,2.614,12,0.039,13,3.02,15,2.34,16,1.779,17,1.587,18,0.453,19,0.39,20,0.39,23,0.685,24,0.669,45,0.453,46,0.116,47,0.029,48,0.029,124,1.853,256,2.681,257,2.681,258,2.681,259,3.266,260,4.297,261,3.266]],["title/injectables/PrismaService.html",[117,0.681,124,0.942]],["body/injectables/PrismaService.html",[12,0.041,18,0.46,19,0.395,20,0.395,23,0.771,24,0.679,29,1.805,45,0.46,46,0.117,47,0.03,48,0.03,64,0.948,66,1.299,67,1.054,68,0.762,69,1.299,82,2.721,117,0.997,118,1.611,122,1.445,124,1.379,125,2.038,126,3.155,189,2.668,194,2.038,197,3.562,262,2.721,263,4.836,264,3.315,265,3.315,266,3.315,267,3.315,268,3.315]],["title/interfaces/UserPayload.html",[200,1.822,208,1.613]],["body/interfaces/UserPayload.html",[12,0.041,18,0.335,19,0.288,20,0.288,23,0.79,24,0.494,29,1.315,37,2.698,45,0.335,46,0.086,47,0.024,48,0.024,56,0.555,61,1.989,67,1.108,68,0.801,90,1.231,97,1.173,105,1.899,106,2.311,107,1.052,108,1.954,117,0.801,120,1.173,122,1.052,124,1.108,125,1.485,126,2.144,127,1.485,130,1.173,132,2.229,139,1.315,142,1.485,143,1.173,144,1.315,145,1.485,156,3.152,177,1.697,189,1.485,193,1.485,194,1.485,195,1.697,196,1.982,199,1.982,200,2.517,202,1.982,203,1.982,204,1.982,205,1.697,206,1.052,207,1.982,208,1.315,209,1.982,210,1.982,211,1.982,212,1.982,213,2.878,214,1.982,215,2.863,216,1.485,217,1.697,218,1.982,269,2.415]],["title/classes/UserPayloadDto.html",[46,0.105,206,1.291]],["body/classes/UserPayloadDto.html",[12,0.04,18,0.406,19,0.349,20,0.349,23,0.636,30,1.591,32,2.399,45,0.406,46,0.141,47,0.027,48,0.027,50,1.591,56,0.671,62,2.999,64,1.395,67,1.443,68,1.121,105,2.172,106,2.206,107,1.978,108,2.296,109,2.399,113,3.274,114,4.426,115,3.274,116,1.797,132,2.172,164,2.055,169,2.055,206,1.738,216,2.791,270,2.399,271,2.923,272,2.923,273,2.923,274,2.923,275,2.923,276,2.923]],["title/controllers/UsersController.html",[52,1.613,277,1.822]],["body/controllers/UsersController.html",[12,0.04,18,0.394,19,0.338,20,0.338,23,0.832,24,0.58,44,1.378,45,0.394,46,0.1,47,0.027,48,0.027,52,1.544,55,2.328,56,0.652,57,1.702,62,1.744,64,0.811,66,1.111,67,0.901,68,0.652,69,1.111,70,1.236,75,2.127,76,2.328,77,2.328,78,2.328,81,1.744,84,1.544,85,2.328,87,1.993,88,2.328,90,1.001,92,3.207,206,2.099,220,2.402,222,1.993,223,2.746,224,1.993,236,1.744,237,1.744,238,2.328,251,1.744,277,2.402,278,2.328,279,2.836,280,3.207,281,2.328,282,2.836,283,2.836,284,2.172,285,2.328,286,2.836,287,2.836,288,2.836,289,2.836,290,2.836,291,2.836]],["title/modules/UsersModule.html",[0,1.046,14,1.613]],["body/modules/UsersModule.html",[0,1.711,2,1.452,3,1.452,4,1.814,5,1.814,6,1.452,7,2.64,8,1.814,12,0.04,14,2.979,15,2.37,16,1.814,17,1.619,18,0.462,19,0.397,20,0.397,23,0.773,24,0.682,44,2.115,45,0.462,46,0.118,47,0.03,48,0.03,277,2.981,284,2.658,285,2.735,292,2.735,293,2.735,294,3.332,295,3.332]],["title/injectables/UsersService.html",[117,0.681,284,1.44]],["body/injectables/UsersService.html",[12,0.041,18,0.32,19,0.275,20,0.275,23,0.744,24,0.472,37,1.256,45,0.32,46,0.082,47,0.023,48,0.023,56,0.53,57,1.47,61,1.639,64,0.964,66,1.322,67,1.395,68,0.775,69,1.322,70,1.005,75,1.837,81,1.418,87,1.621,90,0.814,106,1.639,107,1.47,117,0.775,118,1.121,120,1.938,122,1.005,123,1.893,124,1.395,130,1.639,137,1.418,138,1.621,139,1.256,140,1.893,141,1.621,143,1.938,144,1.837,146,2.371,147,2.074,148,1.893,206,1.912,216,2.074,246,1.893,280,2.769,281,2.769,284,1.639,296,1.893,297,2.306,298,2.306,299,3.373,300,2.306,301,3.373,302,2.306,303,2.306,304,2.306,305,1.893,306,2.306,307,2.306,308,2.306,309,2.306,310,2.306,311,3.373,312,2.306,313,2.306,314,2.306,315,2.306,316,2.306]],["title/coverage.html",[317,2.83]],["body/coverage.html",[6,1.092,12,0.04,20,0.299,30,1.364,46,0.162,47,0.024,48,0.024,49,1.54,51,2.057,52,1.95,53,1.54,54,2.057,58,1.761,68,0.576,72,1.364,79,1.217,83,1.761,84,1.364,97,1.217,104,2.057,117,1.108,119,2.057,124,0.796,147,1.54,164,1.761,165,2.057,188,2.057,195,2.517,200,1.54,206,1.092,208,1.364,219,1.761,220,1.54,222,1.761,223,2.517,224,1.761,225,2.057,235,1.761,236,2.202,237,2.202,251,1.54,262,2.057,270,2.057,277,1.54,278,2.057,284,1.217,296,2.057,317,1.761,318,2.057,319,2.505,320,2.505,321,5.765,322,5.165,323,2.505,324,4.824,325,2.057,326,2.057,327,4.179,328,2.94,329,4.179,330,2.057,331,2.505,332,2.505,333,2.505,334,2.505]],["title/dependencies.html",[3,1.551,335,2.039]],["body/dependencies.html",[3,1.363,12,0.041,24,0.64,34,2.568,46,0.148,47,0.028,48,0.028,101,2.199,116,1.924,127,2.567,130,1.52,141,2.199,193,1.924,205,2.935,234,2.568,336,4.7,337,3.128,338,3.128,339,3.128,340,3.128,341,3.128,342,3.128,343,3.128,344,3.128,345,3.128,346,3.128,347,4.175,348,3.128,349,4.175,350,3.128,351,3.128,352,3.128,353,3.128,354,4.175,355,3.128,356,3.128,357,3.128,358,3.128,359,3.128,360,3.128,361,3.128,362,3.128,363,3.128]],["title/miscellaneous/functions.html",[364,1.527,365,2.921]],["body/miscellaneous/functions.html",[6,2.391,12,0.035,47,0.035,48,0.035,56,1.007,330,3.598,364,2.695,365,3.598,366,4.383]],["title/index.html",[56,0.571,367,2.483,368,2.483]],["body/index.html",[12,0.037,17,2.124,19,0.207,47,0.019,48,0.019,317,1.22,318,2.232,369,1.736,370,1.736,371,3.353,372,2.719,373,1.736,374,1.736,375,1.736,376,1.736,377,2.719,378,1.425,379,3.353,380,1.736,381,1.736,382,1.736,383,3.794,384,1.736,385,3.794,386,4.729,387,1.736,388,4.569,389,1.736,390,1.736,391,1.736,392,2.719,393,1.736,394,2.719,395,1.736,396,3.353,397,1.736,398,2.719,399,1.736,400,1.736,401,1.736,402,1.736,403,1.736,404,3.794,405,4.729,406,4.37,407,1.736,408,2.719,409,1.736,410,1.736,411,1.736,412,1.736,413,1.736,414,4.37,415,2.719,416,3.794,417,1.736,418,2.719,419,1.736,420,1.736,421,2.719,422,4.12,423,3.794,424,1.736,425,2.719,426,1.736,427,1.736,428,1.736,429,1.736,430,3.794,431,1.736,432,1.736,433,1.736,434,1.736,435,1.736,436,2.719,437,1.736,438,1.736,439,1.736,440,1.736,441,1.736,442,2.719,443,1.736,444,1.736,445,1.736,446,2.719,447,1.736,448,1.736,449,3.115,450,2.719,451,1.736,452,1.736,453,1.736,454,1.736,455,1.736,456,1.736,457,1.736,458,1.736,459,2.719,460,1.736,461,1.736,462,1.736,463,1.736,464,3.353,465,1.736,466,1.736,467,1.736,468,1.736,469,1.736,470,1.736,471,2.719,472,1.736,473,1.736,474,1.736,475,1.736,476,1.736,477,2.719,478,1.736,479,1.736,480,1.736,481,2.719,482,2.719,483,1.736,484,1.736,485,1.736,486,1.736,487,1.736,488,1.736,489,1.736,490,1.736,491,1.736,492,1.736,493,1.736,494,1.425,495,1.736,496,1.736,497,1.736,498,1.736,499,1.736,500,1.736,501,1.425]],["title/modules.html",[2,1.754]],["body/modules.html",[1,2.483,2,1.76,11,2.199,12,0.033,13,2.199,14,2.199,47,0.033,48,0.033,449,4.525,502,5.512,503,5.512,504,5.512]],["title/overview.html",[505,3.304]],["body/overview.html",[0,1.036,1,3.378,2,1.279,3,1.279,4,1.598,5,1.598,6,1.279,7,1.598,8,1.598,9,2.41,10,2.41,11,2.94,12,0.038,13,2.873,14,2.784,15,2.178,16,1.598,17,1.427,44,1.427,47,0.027,48,0.027,50,1.598,79,2.211,95,2.41,96,2.41,97,2.211,118,1.427,124,1.716,208,1.598,219,2.064,256,2.41,257,2.41,258,2.41,284,2.211,292,2.41,293,2.41,505,2.41,506,4,507,2.936,508,2.936,509,4]],["title/properties.html",[105,1.938,335,2.039]],["body/properties.html",[12,0.04,47,0.035,48,0.035,105,2.341,378,3.529,494,3.529,501,3.529,510,4.298,511,4.298,512,4.298]],["title/miscellaneous/variables.html",[364,1.527,513,2.921]],["body/miscellaneous/variables.html",[12,0.04,47,0.03,48,0.03,56,0.769,58,3.07,68,0.769,83,2.354,90,1.182,108,1.903,137,2.059,143,1.627,231,2.749,235,3.07,236,2.059,237,2.059,242,2.749,244,2.749,250,3.585,251,2.988,305,2.749,325,2.749,326,3.585,328,3.989,364,2.059,513,2.749,514,3.348,515,4.367,516,4.86,517,4.86,518,3.348,519,3.348,520,3.348,521,3.348,522,3.348]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":511,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["0.43.0",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":509,"title":{},"body":{"overview.html":{}}}],["10",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["11.0.0",{"_index":337,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":336,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":340,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":507,"title":{},"body":{"overview.html":{}}}],["4",{"_index":506,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":508,"title":{},"body":{"overview.html":{}}}],["6.4.0",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["6.8.2",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["7.8.1",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":186,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["8.1.0",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["90d",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["_args",{"_index":173,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["allowing",{"_index":437,"title":{},"body":{"index.html":{}}}],["already",{"_index":315,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":487,"title":{},"body":{"index.html":{}}}],["application",{"_index":406,"title":{},"body":{"index.html":{}}}],["applications",{"_index":377,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["argon.hash(password",{"_index":302,"title":{},"body":{"injectables/UsersService.html":{}}}],["argon.verify(user.password",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["async",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":49,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":53,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":247,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["authguard",{"_index":192,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":190,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":494,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorized",{"_index":223,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["authpayloaddto",{"_index":72,"title":{"classes/AuthPayloadDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":79,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":425,"title":{},"body":{"index.html":{}}}],["backers",{"_index":488,"title":{},"body":{"index.html":{}}}],["based",{"_index":420,"title":{},"body":{"index.html":{}}}],["board",{"_index":480,"title":{},"body":{"index.html":{}}}],["body",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":504,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":502,"title":{},"body":{"modules.html":{}}}],["building",{"_index":372,"title":{},"body":{"index.html":{}}}],["can't",{"_index":307,"title":{},"body":{"injectables/UsersService.html":{}}}],["canactivate",{"_index":226,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["canactivate(context",{"_index":230,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["catch",{"_index":310,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":452,"title":{},"body":{"index.html":{}}}],["character",{"_index":185,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["characters",{"_index":187,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["check",{"_index":414,"title":{},"body":{"index.html":{}}}],["class",{"_index":46,"title":{"classes/Auth.html":{},"classes/AuthPayloadDto.html":{},"classes/IsPasswordPolicy.html":{},"classes/UserPayloadDto.html":{}},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":50,"title":{},"body":{"classes/Auth.html":{},"classes/AuthPayloadDto.html":{},"classes/IsPasswordPolicy.html":{},"classes/UserPayloadDto.html":{},"overview.html":{}}}],["clicks",{"_index":436,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":419,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":256,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":258,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":257,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":292,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":293,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":443,"title":{},"body":{"index.html":{}}}],["config",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["config.get('database_url",{"_index":268,"title":{},"body":{"injectables/PrismaService.html":{}}}],["config.get('jwt_secret",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["configmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["const",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["constructor(config",{"_index":197,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["constructor(prisma",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":227,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["context",{"_index":233,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["context.gethandler",{"_index":241,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":243,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["controller",{"_index":52,"title":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":287,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":458,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":317,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":308,"title":{},"body":{"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":280,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":290,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(payload",{"_index":281,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["csrf",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":305,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["datasources",{"_index":265,"title":{},"body":{"injectables/PrismaService.html":{}}}],["db",{"_index":266,"title":{},"body":{"injectables/PrismaService.html":{}}}],["dbuser",{"_index":248,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["dbuser!.role.permissions.some",{"_index":252,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":454,"title":{},"body":{"index.html":{}}}],["default",{"_index":516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":168,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["defaultmessage(_args",{"_index":170,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["defined",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":404,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":424,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":415,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":435,"title":{},"body":{"index.html":{}}}],["description",{"_index":378,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":389,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":466,"title":{},"body":{"index.html":{}}}],["discord",{"_index":451,"title":{},"body":{"index.html":{}}}],["dive",{"_index":453,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":318,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":399,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":373,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":412,"title":{},"body":{"index.html":{}}}],["email",{"_index":106,"title":{},"body":{"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":410,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":470,"title":{},"body":{"index.html":{}}}],["error",{"_index":311,"title":{},"body":{"injectables/UsersService.html":{}}}],["error.code",{"_index":313,"title":{},"body":{"injectables/UsersService.html":{}}}],["example",{"_index":385,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":231,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["existed",{"_index":316,"title":{},"body":{"injectables/UsersService.html":{}}}],["experience",{"_index":456,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":342,"title":{},"body":{"dependencies.html":{}}}],["express.request",{"_index":520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":189,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["extractjwt",{"_index":203,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["false",{"_index":177,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["fast",{"_index":428,"title":{},"body":{"index.html":{}}}],["features",{"_index":439,"title":{},"body":{"index.html":{}}}],["few",{"_index":430,"title":{},"body":{"index.html":{}}}],["file",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["focus",{"_index":438,"title":{},"body":{"index.html":{}}}],["follow",{"_index":474,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('user",{"_index":246,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(`missing",{"_index":255,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["forbiddenexception(`password",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(`user",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":371,"title":{},"body":{"index.html":{}}}],["full",{"_index":469,"title":{},"body":{"index.html":{}}}],["function",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":365,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":433,"title":{},"body":{"index.html":{}}}],["generated/prisma",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PrismaService.html":{}}}],["generated/prisma/runtime/library",{"_index":300,"title":{},"body":{"injectables/UsersService.html":{}}}],["get('me",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getme(@getme",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(user",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":367,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettoken(userid",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["global",{"_index":260,"title":{},"body":{"modules/PrismaModule.html":{}}}],["graph",{"_index":461,"title":{},"body":{"index.html":{}}}],["grow",{"_index":484,"title":{},"body":{"index.html":{}}}],["guard",{"_index":219,"title":{"guards/OnlyAuthorizedRoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":221,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["hands",{"_index":455,"title":{},"body":{"index.html":{}}}],["handy",{"_index":444,"title":{},"body":{"index.html":{}}}],["has_permission_key",{"_index":235,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword",{"_index":301,"title":{},"body":{"injectables/UsersService.html":{}}}],["haspermission",{"_index":251,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["haspermission('create_user",{"_index":288,"title":{},"body":{"controllers/UsersController.html":{}}}],["helmet",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":459,"title":{},"body":{"index.html":{}}}],["here",{"_index":492,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":498,"title":{},"body":{"index.html":{}}}],["id",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{}}}],["identifier",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":166,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{}}}],["import",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["include",{"_index":181,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{}}}],["incorrect",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":56,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":417,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":441,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":117,"title":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":432,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":387,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":312,"title":{},"body":{"injectables/UsersService.html":{}}}],["interact",{"_index":462,"title":{},"body":{"index.html":{}}}],["interface",{"_index":208,"title":{"interfaces/UserPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":269,"title":{},"body":{"interfaces/UserPayload.html":{}}}],["isemail",{"_index":113,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isemail()@isnotempty",{"_index":109,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isglobal",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":114,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["ispasswordpolicy",{"_index":30,"title":{"classes/IsPasswordPolicy.html":{}},"body":{"modules/AppModule.html":{},"classes/IsPasswordPolicy.html":{},"classes/UserPayloadDto.html":{},"coverage.html":{}}}],["isstring",{"_index":115,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isstring()@isnotempty",{"_index":111,"title":{},"body":{"classes/AuthPayloadDto.html":{}}}],["isstring()@isnotempty()@validate(ispasswordpolicy",{"_index":273,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["job",{"_index":477,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":479,"title":{},"body":{"index.html":{}}}],["join",{"_index":490,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":209,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["jwtguard",{"_index":84,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":97,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":495,"title":{},"body":{"index.html":{}}}],["key",{"_index":407,"title":{},"body":{"index.html":{}}}],["learn",{"_index":447,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":501,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":482,"title":{},"body":{"index.html":{}}}],["limit",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["linkedin",{"_index":476,"title":{},"body":{"index.html":{}}}],["looking",{"_index":418,"title":{},"body":{"index.html":{}}}],["loop",{"_index":472,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":183,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["makes",{"_index":426,"title":{},"body":{"index.html":{}}}],["managing",{"_index":440,"title":{},"body":{"index.html":{}}}],["matching",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":422,"title":{},"body":{"index.html":{}}}],["me.decorator.ts",{"_index":326,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["me/get",{"_index":325,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":364,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":481,"title":{},"body":{"index.html":{}}}],["mode",{"_index":392,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":416,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":496,"title":{},"body":{"index.html":{}}}],["name",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":467,"title":{},"body":{"index.html":{}}}],["nest",{"_index":379,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":500,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":405,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["nestjs/core",{"_index":234,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":338,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mau",{"_index":434,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":193,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":341,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":343,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":370,"title":{},"body":{"index.html":{}}}],["npm",{"_index":386,"title":{},"body":{"index.html":{}}}],["null",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["number",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{}}}],["number(roleid",{"_index":306,"title":{},"body":{"injectables/UsersService.html":{}}}],["offer",{"_index":478,"title":{},"body":{"index.html":{}}}],["official",{"_index":423,"title":{},"body":{"index.html":{}}}],["onlyauthorizedroleguard",{"_index":220,"title":{"guards/OnlyAuthorizedRoleGuard.html":{}},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["onlyauthorizedroleguard)@haspermission('create_user')@post('create",{"_index":282,"title":{},"body":{"controllers/UsersController.html":{}}}],["open",{"_index":483,"title":{},"body":{"index.html":{}}}],["optional",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":505,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":314,"title":{},"body":{"injectables/UsersService.html":{}}}],["package",{"_index":335,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["part",{"_index":468,"title":{},"body":{"index.html":{}}}],["passport",{"_index":205,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":202,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["passportstrategy(strategy",{"_index":196,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["password",{"_index":107,"title":{},"body":{"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"injectables/UsersService.html":{}}}],["passwordmatch",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.sub",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["permission",{"_index":250,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["permission.decorator",{"_index":238,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{}}}],["permission.decorator.ts",{"_index":328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["permission/has",{"_index":237,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissions",{"_index":249,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["platform",{"_index":421,"title":{},"body":{"index.html":{}}}],["please",{"_index":450,"title":{},"body":{"index.html":{}}}],["policy.validation",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/UserPayloadDto.html":{}}}],["policy.validation.ts",{"_index":165,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"coverage.html":{}}}],["policy.validation.ts:11",{"_index":175,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["policy.validation.ts:15",{"_index":172,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["possible",{"_index":413,"title":{},"body":{"index.html":{}}}],["post",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('create",{"_index":289,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('signin",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma.service",{"_index":261,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["prisma/prisma.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":263,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":299,"title":{},"body":{"injectables/UsersService.html":{}}}],["prismamodule",{"_index":13,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":124,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{}}}],["production",{"_index":394,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":369,"title":{},"body":{"index.html":{}}}],["project",{"_index":383,"title":{},"body":{"index.html":{}}}],["promise",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{}}}],["properties",{"_index":105,"title":{"properties.html":{}},"body":{"classes/AuthPayloadDto.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["questions",{"_index":448,"title":{},"body":{"index.html":{}}}],["read",{"_index":491,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":403,"title":{},"body":{"index.html":{}}}],["real",{"_index":463,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":228,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["repository",{"_index":382,"title":{},"body":{"index.html":{}}}],["request",{"_index":242,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":244,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["requiredpermission",{"_index":239,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["requiring",{"_index":429,"title":{},"body":{"index.html":{}}}],["reset",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":442,"title":{},"body":{"index.html":{}}}],["results",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{}}}],["role.guard",{"_index":286,"title":{},"body":{"controllers/UsersController.html":{}}}],["role.guard.ts",{"_index":225,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"coverage.html":{}}}],["role.guard.ts:14",{"_index":229,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["role.guard.ts:20",{"_index":232,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["role/only",{"_index":224,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["roleid",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"injectables/UsersService.html":{}}}],["rp",{"_index":253,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["rp.permission.name",{"_index":254,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["run",{"_index":388,"title":{},"body":{"index.html":{}}}],["runs",{"_index":411,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":374,"title":{},"body":{"index.html":{}}}],["secret",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":211,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["select",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["server",{"_index":375,"title":{},"body":{"index.html":{}}}],["setmetadata(has_permission_key",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":384,"title":{},"body":{"index.html":{}}}],["side",{"_index":376,"title":{},"body":{"index.html":{}}}],["signin",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(payload",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["simple",{"_index":431,"title":{},"body":{"index.html":{}}}],["source",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":184,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["sponsors",{"_index":486,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../has",{"_index":515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:32",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":104,"title":{},"body":{"classes/AuthPayloadDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:10",{"_index":112,"title":{},"body":{"classes/AuthPayloadDto.html":{}}}],["src/auth/dto/auth.dto.ts:6",{"_index":110,"title":{},"body":{"classes/AuthPayloadDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":51,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/decorators/get",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/has",{"_index":236,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guard",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["src/guard/jwt.guard.ts",{"_index":188,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/guard/jwt.guard.ts:5",{"_index":191,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["src/guard/only",{"_index":222,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":330,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":259,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":262,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":264,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/strategy",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/strategy/jwt.strategy.ts",{"_index":195,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["src/strategy/jwt.strategy.ts:15",{"_index":198,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/strategy/jwt.strategy.ts:26",{"_index":201,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/dto",{"_index":207,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["src/users/dto/users.dto.ts",{"_index":270,"title":{},"body":{"classes/UserPayloadDto.html":{},"coverage.html":{}}}],["src/users/dto/users.dto.ts:12",{"_index":274,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/dto/users.dto.ts:15",{"_index":272,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/dto/users.dto.ts:18",{"_index":275,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/dto/users.dto.ts:7",{"_index":271,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/users.controller.ts",{"_index":278,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":283,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":294,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":296,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":298,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":297,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/validators/password",{"_index":164,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"classes/UserPayloadDto.html":{},"coverage.html":{}}}],["start",{"_index":390,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":393,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":395,"title":{},"body":{"index.html":{}}}],["started",{"_index":368,"title":{"index.html":{}},"body":{}}],["starter",{"_index":381,"title":{},"body":{"index.html":{}}}],["statements",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":471,"title":{},"body":{"index.html":{}}}],["steps",{"_index":408,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":427,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":204,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["string",{"_index":108,"title":{},"body":{"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["success",{"_index":309,"title":{},"body":{"injectables/UsersService.html":{}}}],["super",{"_index":194,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["support",{"_index":449,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":503,"title":{},"body":{"modules.html":{}}}],["table",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":409,"title":{},"body":{"index.html":{}}}],["test",{"_index":398,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":401,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":400,"title":{},"body":{"index.html":{}}}],["tests",{"_index":396,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":485,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(payload",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('jwt_secret",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettoken(user.id",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.signasync(payload",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":304,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{}}}],["this.reflector.get",{"_index":240,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["this.usersservice.createuser(payload",{"_index":291,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlermodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":464,"title":{},"body":{"index.html":{}}}],["token",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":493,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":303,"title":{},"body":{"injectables/UsersService.html":{}}}],["ttl",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":499,"title":{},"body":{"index.html":{}}}],["type",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":339,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":380,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["unit",{"_index":397,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":512,"title":{},"body":{"properties.html":{}}}],["updates",{"_index":473,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":182,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["url",{"_index":267,"title":{},"body":{"injectables/PrismaService.html":{}}}],["useguards",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtguard",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtguard)@get('me",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":245,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["userid",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpayload",{"_index":200,"title":{"interfaces/UserPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["userpayloaddto",{"_index":206,"title":{"classes/UserPayloadDto.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users",{"_index":279,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":295,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":285,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":277,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":14,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":284,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":465,"title":{},"body":{"index.html":{}}}],["validate",{"_index":169,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"classes/UserPayloadDto.html":{}}}],["validate(ispasswordpolicy",{"_index":276,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["validate(password",{"_index":174,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validate(payload",{"_index":199,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["validationarguments",{"_index":171,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validator",{"_index":116,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/IsPasswordPolicy.html":{},"classes/UserPayloadDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":176,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validatorconstraintinterface",{"_index":167,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validators/password",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["value",{"_index":517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":513,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":510,"title":{},"body":{"properties.html":{}}}],["video",{"_index":457,"title":{},"body":{"index.html":{}}}],["visit",{"_index":446,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":460,"title":{},"body":{"index.html":{}}}],["watch",{"_index":391,"title":{},"body":{"index.html":{}}}],["weak",{"_index":180,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["website",{"_index":497,"title":{},"body":{"index.html":{}}}],["working",{"_index":445,"title":{},"body":{"index.html":{}}}],["x",{"_index":475,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":489,"title":{},"body":{"index.html":{}}}],["you're",{"_index":402,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":178,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_]).{8,}$/.test(password",{"_index":179,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["zoom",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { IsPasswordPolicy } from './validators/password-policy.validation';\nimport { ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthModule,\n    PrismaModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    ThrottlerModule.forRoot({\n      throttlers: [\n        {\n          ttl: 60000,\n          limit: 10,\n        },\n      ],\n    }),\n  ],\n  controllers: [],\n  providers: [IsPasswordPolicy],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getMe\n                            \n                            \n                                    \n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     User\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(payload: AuthPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            AuthPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthPayloadDto } from './dto';\nimport { User } from 'generated/prisma';\nimport { GetMe } from 'src/decorators/get-me';\nimport { JwtGuard } from 'src/guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('signin')\n  signin(@Body() payload: AuthPayloadDto) {\n    return this.authService.signin(payload);\n  }\n\n  @UseGuards(JwtGuard)\n  @Get('me')\n  getMe(@GetMe() user: User) {\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from 'src/strategy';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  imports: [JwtModule.register({})],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthPayloadDto.html":{"url":"classes/AuthPayloadDto.html","title":"class - AuthPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthPayloadDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getToken\n                            \n                            \n                                    Async\n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, config: ConfigService, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(userId: number, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(payload: AuthPayloadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            AuthPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { AuthPayloadDto } from './dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as argon from 'argon2';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private config: ConfigService,\n    private jwt: JwtService,\n  ) {}\n\n  async signin(payload: AuthPayloadDto) {\n    const { email, password } = payload;\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email,\n      },\n    });\n\n    if (!user) throw new ForbiddenException(`User does not exist`);\n\n    const passwordMatch = await argon.verify(user.password, password);\n\n    if (!passwordMatch) throw new ForbiddenException(`Password is incorrect`);\n\n    return this.getToken(user.id, user.email);\n  }\n\n  async getToken(userId: number, email: string): Promise {\n    const payload = {\n      sub: userId,\n      email,\n    };\n\n    const secret: string | undefined = this.config.get('JWT_SECRET');\n\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: '90d',\n      secret,\n    });\n\n    return { token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsPasswordPolicy.html":{"url":"classes/IsPasswordPolicy.html","title":"class - IsPasswordPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsPasswordPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validators/password-policy.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(_args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validators/password-policy.validation.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(password: string, _args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validators/password-policy.validation.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n@ValidatorConstraint({ name: 'IsPasswordPolicy', async: false })\nexport class IsPasswordPolicy implements ValidatorConstraintInterface {\n  validate(password: string, _args: ValidationArguments) {\n    return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/.test(password);\n  }\n\n  defaultMessage(_args: ValidationArguments) {\n    return 'Password too weak. Must include uppercase, lowercase, number, special character, and be at least 8 characters.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guard/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/guard/jwt.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/strategy/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: UserPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/strategy/jwt.strategy.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UserPayloadDto } from 'src/users/dto';\n\ninterface UserPayload {\n  sub: number;\n  email: string;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    config: ConfigService,\n    private prisma: PrismaService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET') as string,\n    });\n  }\n\n  async validate(payload: UserPayload) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        roleId: true,\n        password: false,\n        role: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/OnlyAuthorizedRoleGuard.html":{"url":"guards/OnlyAuthorizedRoleGuard.html","title":"guard - OnlyAuthorizedRoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    OnlyAuthorizedRoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/only-authorized-role/only-authorized-role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/only-authorized-role/only-authorized-role.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/only-authorized-role/only-authorized-role.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { HAS_PERMISSION_KEY } from 'src/decorators/has-permission/has-permission.decorator';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class OnlyAuthorizedRoleGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private prisma: PrismaService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredPermission = this.reflector.get(\n      HAS_PERMISSION_KEY,\n      context.getHandler(),\n    );\n\n    if (!requiredPermission) return true;\n\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n\n    if (!user || !user.id)\n      throw new ForbiddenException('User not authenticated');\n\n    const dbuser = await this.prisma.user.findUnique({\n      where: { id: user.id },\n      include: {\n        role: {\n          include: {\n            permissions: {\n              include: {\n                permission: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const hasPermission = dbuser!.role.permissions.some(\n      (rp) => rp.permission.name === requiredPermission,\n    );\n\n    if (!hasPermission) {\n      throw new ForbiddenException(`Missing permission: ${requiredPermission}`);\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient } from 'generated/prisma';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class PrismaService extends PrismaClient {\n  constructor(config: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: config.get('DATABASE_URL'),\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPayload.html":{"url":"interfaces/UserPayload.html","title":"interface - UserPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UserPayloadDto } from 'src/users/dto';\n\ninterface UserPayload {\n  sub: number;\n  email: string;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    config: ConfigService,\n    private prisma: PrismaService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET') as string,\n    });\n  }\n\n  async validate(payload: UserPayload) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        roleId: true,\n        password: false,\n        role: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPayloadDto.html":{"url":"classes/UserPayloadDto.html","title":"class - UserPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                roleId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Validate(IsPasswordPolicy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, Validate } from 'class-validator';\nimport { IsPasswordPolicy } from 'src/validators/password-policy.validation';\n\nexport class UserPayloadDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Validate(IsPasswordPolicy)\n  password: string;\n\n  @IsNotEmpty()\n  name: string;\n\n  @IsNotEmpty()\n  roleId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(payload: UserPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)@HasPermission('create_user')@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common';\nimport { UserPayloadDto } from './dto';\nimport { UsersService } from './users.service';\nimport { JwtGuard } from 'src/guard';\nimport { HasPermission } from 'src/decorators/has-permission/has-permission.decorator';\nimport { OnlyAuthorizedRoleGuard } from 'src/guard/only-authorized-role/only-authorized-role.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)\n  @HasPermission('create_user')\n  @Post('create')\n  createUser(@Body() payload: UserPayloadDto) {\n    return this.usersService.createUser(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(payload: UserPayloadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { UserPayloadDto } from './dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as argon from 'argon2';\nimport { PrismaClientKnownRequestError } from 'generated/prisma/runtime/library';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n  async createUser(payload: UserPayloadDto) {\n    const { email, name, password, roleId } = payload;\n\n    const hashPassword = await argon.hash(password);\n\n    try {\n      const user = await this.prisma.user.create({\n        data: {\n          email,\n          name,\n          password: hashPassword,\n          roleId: Number(roleId),\n        },\n      });\n\n      if (!user) {\n        throw new ForbiddenException(`User can't create!`);\n      } else {\n        return {\n          success: true,\n        };\n      }\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === 'P2002') {\n          throw new ForbiddenException('User is already existed');\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthPayloadDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/get-me/get-me.decorator.ts\n            \n            variable\n            GetMe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/has-permission/has-permission.decorator.ts\n            \n            variable\n            HAS_PERMISSION_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/has-permission/has-permission.decorator.ts\n            \n            variable\n            HasPermission\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guard/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guard/only-authorized-role/only-authorized-role.guard.ts\n            \n            guard\n            OnlyAuthorizedRoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/strategy/jwt.strategy.ts\n            \n            interface\n            UserPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/users.dto.ts\n            \n            class\n            UserPayloadDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/validators/password-policy.validation.ts\n            \n            class\n            IsPasswordPolicy\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/throttler : ^6.4.0\n        \n            @prisma/client : ^6.8.2\n        \n            @types/passport-jwt : ^4.0.1\n        \n            argon2 : ^0.43.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            csrf-csrf : ^4.0.2\n        \n            helmet : ^8.1.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            prisma : ^6.8.2\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetMe   (src/.../get-me.decorator.ts)\n                        \n                        \n                            HAS_PERMISSION_KEY   (src/.../has-permission.decorator.ts)\n                        \n                        \n                            HasPermission   (src/.../has-permission.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/get-me/get-me.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetMe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request: Express.Request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/decorators/has-permission/has-permission.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HAS_PERMISSION_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hasPermission'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (permission: string) =>\n  SetMetadata(HAS_PERMISSION_KEY, permission)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
