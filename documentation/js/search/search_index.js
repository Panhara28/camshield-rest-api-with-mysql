var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.116,1,2.082]],["body/modules/AppModule.html",[0,1.644,1,3.998,2,1.296,3,1.296,4,1.547,5,1.547,6,1.296,7,2.171,8,1.547,9,2.441,10,2.441,11,3.27,12,0.031,13,3.27,14,3.27,15,3.27,16,2.171,17,1.547,18,1.413,19,0.269,20,0.233,21,0.233,22,2.918,23,3.425,24,0.777,25,0.569,26,2.918,27,2.918,28,2.918,29,2.918,30,1.703,31,2.171,32,2.918,33,2.126,34,2.918,35,2.441,36,2.918,37,2.918,38,2.918,39,1.547,40,2.918,41,2.918,42,2.918,43,2.918,44,1.891,45,2.441,46,1.296,47,0.269,48,0.133,49,0.019,50,0.019]],["title/classes/Auth.html",[48,0.146,51,2.082]],["body/classes/Auth.html",[12,0.029,19,0.442,20,0.383,21,0.383,47,0.442,48,0.218,49,0.027,50,0.027,51,3.661,52,2.544,53,4.014]],["title/controllers/AuthController.html",[54,1.556,55,2.082]],["body/controllers/AuthController.html",[12,0.031,19,0.275,20,0.238,21,0.238,24,0.746,25,0.581,46,1.324,47,0.275,48,0.136,49,0.02,50,0.02,51,1.931,54,1.443,55,2.693,56,2.492,57,2.171,58,0.531,59,1.698,60,3.487,61,3.476,62,2.98,63,2.859,64,2.203,65,2.98,66,1.135,67,2.98,68,1.565,69,1.135,70,0.674,71,1.23,72,1.698,73,2.492,74,3.022,75,4.156,76,2.98,77,2.426,78,2.492,79,2.492,80,2.171,81,2.492,82,2.492,83,1.662,84,2.171,85,2.492,86,2.171,87,2.537,88,2.492,89,1.931,90,2.171,91,2.171,92,1.58,93,2.171,94,2.98,95,1.931,96,2.171,97,2.98,98,2.98,99,2.171,100,2.98,101,2.98]],["title/modules/AuthModule.html",[0,1.116,11,1.876]],["body/modules/AuthModule.html",[0,1.802,2,1.549,3,1.549,4,1.848,5,1.848,6,1.549,7,2.751,8,1.848,11,3.574,12,0.031,16,2.452,17,1.848,18,1.689,19,0.321,20,0.278,21,0.278,23,2.916,24,0.761,25,0.68,46,2.054,47,0.321,48,0.159,49,0.022,50,0.022,55,3.363,87,3.134,88,2.916,102,2.916,103,2.916,104,3.134,105,3.487,106,3.487,107,3.487,108,2.54,109,3.487,110,3.487]],["title/classes/AuthPayloadDto.html",[48,0.146,74,1.876]],["body/classes/AuthPayloadDto.html",[12,0.03,19,0.36,20,0.312,21,0.312,24,0.517,47,0.36,48,0.227,49,0.024,50,0.024,52,2.072,58,0.696,64,2.641,66,1.36,70,0.807,74,2.907,111,3.268,112,2.035,113,2.24,114,2.435,115,1.851,116,3.268,117,3.908,118,3.908,119,3.908,120,3.628,121,3.994,122,3.628,123,2.281]],["title/injectables/AuthService.html",[87,1.704,124,0.684]],["body/injectables/AuthService.html",[12,0.031,19,0.216,20,0.187,21,0.187,24,0.687,25,0.457,30,1.367,47,0.216,48,0.107,49,0.017,50,0.017,58,0.417,59,1.427,61,2.92,63,1.691,66,1.14,68,1.572,69,1.14,70,0.677,71,1.236,72,1.427,73,2.92,74,2.702,77,2.438,83,1.213,87,1.851,89,1.517,108,1.706,113,2.122,114,1.551,115,1.484,124,0.743,125,1.04,126,1.958,127,2.753,128,3.492,129,1.691,130,1.958,131,1.743,132,2.706,133,3,134,2.706,135,4.63,136,2.341,137,1.551,138,3.492,139,1.706,140,2.341,141,3.492,142,2.92,143,2.341,144,1.517,145,1.517,146,1.367,147,1.958,148,1.706,149,2.706,150,2.122,151,2.438,152,1.367,153,2.263,154,1.851,155,1.958,156,2.341,157,3.492,158,2.341,159,2.341,160,2.341,161,2.341,162,2.341,163,1.706,164,3.492,165,2.341,166,2.341,167,3.492,168,2.341,169,2.341,170,2.341]],["title/injectables/FileUploadInterceptor.html",[124,0.684,171,2.341]],["body/injectables/FileUploadInterceptor.html",[12,0.032,19,0.236,20,0.204,21,0.442,24,0.679,25,0.498,39,1.974,47,0.236,48,0.116,49,0.018,50,0.018,70,0.604,124,0.792,125,1.135,150,2.189,171,2.713,172,2.137,173,2.174,174,3.724,175,3.724,176,4.394,177,3.724,178,3.724,179,3.114,180,4.829,181,4.829,182,3.724,183,3.675,184,3.724,185,3.724,186,4.829,187,3.724,188,3.724,189,3.724,190,3.724,191,4.829,192,3.724,193,3.724,194,3.724,195,3.724,196,3.724,197,3.724,198,3.724,199,3.724,200,3.724,201,3.724,202,2.413,203,2.555,204,2.137,205,2.137,206,2.137,207,2.555,208,2.555,209,2.137,210,1.861]],["title/classes/IsPasswordPolicy.html",[31,1.704,48,0.146]],["body/classes/IsPasswordPolicy.html",[12,0.03,19,0.299,20,0.259,21,0.259,24,0.429,31,2.653,47,0.299,48,0.2,49,0.021,50,0.021,52,1.72,58,0.578,59,1.8,66,1.203,68,1.659,69,1.366,70,0.714,71,1.304,72,1.8,83,1.531,114,1.957,115,1.721,123,1.894,127,1.72,139,1.326,202,2.102,211,3.243,212,2.713,213,3.685,214,5.004,215,4.407,216,2.855,217,4.407,218,5.922,219,3.245,220,5.368,221,4.407,222,3.245,223,4.407,224,3.245,225,3.245,226,3.245,227,2.364,228,3.245,229,3.245,230,3.245,231,3.245,232,3.245,233,3.245]],["title/injectables/JwtGuard.html",[92,1.704,124,0.684]],["body/injectables/JwtGuard.html",[12,0.031,19,0.389,20,0.337,21,0.337,24,0.692,25,0.823,47,0.389,48,0.192,49,0.025,50,0.025,66,1.153,92,2.772,124,1.113,125,1.875,129,2.751,173,3.052,234,3.53,235,5.228,236,4.221,237,4.221,238,2.735,239,2.735]],["title/injectables/JwtStrategy.html",[104,1.704,124,0.684]],["body/injectables/JwtStrategy.html",[12,0.031,19,0.243,20,0.21,21,0.21,24,0.716,25,0.514,30,1.538,39,2.871,47,0.243,48,0.12,49,0.018,50,0.018,58,0.469,59,1.556,63,2.166,66,1.04,68,1.434,69,1.338,70,0.617,71,1.127,72,1.076,77,1.538,83,1.323,104,2.019,113,1.556,114,1.17,115,1.221,124,0.81,125,1.17,127,2.371,129,1.844,131,1.844,132,2.468,133,3.175,134,1.707,137,1.987,139,1.076,144,1.707,146,1.538,149,1.707,150,1.076,151,1.538,152,1.538,163,1.919,173,2.223,202,1.707,216,2.468,238,1.707,239,1.707,240,1.919,241,3.185,242,2.204,243,2.635,244,3.185,245,3.175,246,2.635,247,2.204,248,2.204,249,2.204,250,1.919,251,1.17,252,2.204,253,0.992,254,2.204,255,2.204,256,2.204,257,2.204,258,2.898,259,2.204,260,2.774,261,1.276,262,1.707,263,2.204]],["title/guards/OnlyAuthorizedRoleGuard.html",[264,2.341,265,2.082]],["body/guards/OnlyAuthorizedRoleGuard.html",[12,0.031,19,0.228,20,0.197,21,0.197,24,0.629,25,0.482,39,2.286,47,0.228,48,0.112,49,0.017,50,0.017,58,0.44,59,1.485,63,1.761,66,0.993,68,1.369,69,0.993,70,0.589,71,1.076,72,1.01,83,1.263,124,0.774,127,2.286,129,1.761,131,1.79,137,1.915,142,3.04,145,1.602,146,1.443,149,2.356,150,2.07,151,1.443,152,1.443,153,2.356,154,1.927,213,2.068,227,3.141,258,1.602,262,1.602,265,2.356,266,2.472,267,3.141,268,3.859,269,3.141,270,2.068,271,4.754,272,2.472,273,5.297,274,2.472,275,3.635,276,3.976,277,2.472,278,2.472,279,2.068,280,2.648,281,1.602,282,1.602,283,2.068,284,4.754,285,2.472,286,2.472,287,2.068,288,2.472,289,2.068,290,3.635,291,2.068,292,2.472,293,2.472,294,2.472,295,3.04,296,2.356,297,2.472,298,2.472,299,2.472,300,2.472]],["title/interfaces/PaginationParmas.html",[253,1.21,301,2.082]],["body/interfaces/PaginationParmas.html",[12,0.029,19,0.383,20,0.332,21,0.332,44,3.826,47,0.383,49,0.025,50,0.025,58,0.741,70,0.84,71,1.748,112,2.116,139,2.531,253,1.566,301,3.357,302,2.205,303,3.478,304,3.03,305,4.302]],["title/modules/PrismaModule.html",[0,1.116,13,1.876]],["body/modules/PrismaModule.html",[0,1.864,2,1.659,3,1.659,4,1.98,5,1.98,6,1.659,7,2.845,8,2.845,12,0.03,13,3.579,16,2.565,17,1.98,18,1.808,19,0.344,20,0.298,21,0.298,24,0.64,25,0.728,47,0.344,48,0.17,49,0.023,50,0.023,131,2.416,306,3.123,307,3.123,308,3.123,309,3.734,310,4.837,311,3.734]],["title/injectables/PrismaService.html",[124,0.684,131,1.21]],["body/injectables/PrismaService.html",[12,0.031,19,0.349,20,0.302,21,0.302,24,0.714,25,0.738,30,2.209,47,0.349,48,0.172,49,0.023,50,0.023,66,1.033,68,1.425,69,1.033,70,0.614,71,1.12,90,2.757,124,1.038,125,1.681,129,1.833,131,1.837,132,2.452,133,3.697,173,2.848,239,2.452,242,4.081,312,3.165,313,4.516,314,3.785,315,3.785,316,3.785,317,3.785,318,3.785]],["title/classes/UpdateUserPayloadDto.html",[48,0.146,319,1.704]],["body/classes/UpdateUserPayloadDto.html",[12,0.03,19,0.335,20,0.29,21,0.29,24,0.629,31,1.928,33,2.65,47,0.438,48,0.241,49,0.023,50,0.023,52,1.928,58,0.648,64,1.928,66,0.993,69,1.534,70,0.59,71,1.407,112,1.943,113,1.486,114,1.616,115,1.87,120,3.464,121,4.248,122,3.86,123,2.123,139,1.486,211,2.357,216,2.357,251,1.616,261,1.762,319,2.521,320,2.65,321,3.637,322,3.637,323,3.977,324,3.042]],["title/controllers/UploadController.html",[54,1.556,325,2.082]],["body/controllers/UploadController.html",[12,0.031,19,0.334,20,0.289,21,0.422,24,0.699,25,0.706,46,1.609,47,0.334,48,0.165,49,0.023,50,0.023,54,1.754,57,2.638,58,0.645,59,1.937,64,1.92,66,0.989,68,1.364,69,0.989,70,0.587,71,1.072,72,1.48,83,1.258,84,2.638,86,2.638,92,1.92,93,2.638,95,2.347,96,2.638,99,2.638,325,3.073,326,3.029,327,3.029,328,3.966,329,3.029,330,4.422,331,3.622,332,3.622,333,3.622,334,2.803,335,3.029,336,3.622,337,3.622,338,3.622,339,3.622]],["title/modules/UploadModule.html",[0,1.116,14,1.876]],["body/modules/UploadModule.html",[0,1.88,2,1.689,3,1.689,4,2.015,5,2.015,6,1.689,7,2.869,8,2.015,12,0.03,14,3.533,16,2.594,17,2.015,18,1.841,19,0.35,20,0.304,21,0.304,24,0.716,25,0.741,46,2.174,47,0.35,48,0.173,49,0.023,50,0.023,325,3.507,334,3.209,335,3.179,340,3.179,341,3.179,342,3.802,343,3.802]],["title/injectables/UploadService.html",[124,0.684,334,1.704]],["body/injectables/UploadService.html",[12,0.031,19,0.311,20,0.269,21,0.468,24,0.446,25,0.658,47,0.311,48,0.154,49,0.021,50,0.021,58,0.601,59,1.849,66,0.922,68,1.271,69,0.922,70,0.547,71,0.999,72,1.379,83,1.172,115,1.082,124,0.963,125,1.499,145,2.187,150,1.379,153,2.187,154,1.789,179,4.27,327,2.822,328,3.785,329,3.785,330,5.003,334,2.399,344,2.822,345,3.375,346,3.785,347,5.105,348,5.105,349,5.105,350,3.375,351,3.375,352,3.375,353,3.375,354,2.822]],["title/interfaces/UserFilterInterface.html",[253,1.21,355,2.082]],["body/interfaces/UserFilterInterface.html",[12,0.029,19,0.362,20,0.313,21,0.313,47,0.362,49,0.024,50,0.024,58,0.699,69,1.579,70,0.891,71,1.807,112,2.041,113,2.363,115,1.957,139,2.245,253,1.478,261,2.801,302,2.081,304,2.86,355,3.237,356,2.544,357,2.291]],["title/interfaces/UserInterface.html",[253,1.21,358,2.082]],["body/interfaces/UserInterface.html",[12,0.03,19,0.367,20,0.318,21,0.318,24,0.667,47,0.367,49,0.024,50,0.024,58,0.709,63,1.928,70,0.817,112,2.059,253,2.082,301,3.767,302,2.111,355,3.767,356,2.58,357,3.5,358,3.266,359,3.33,360,4.369]],["title/interfaces/UserPayload.html",[245,2.082,253,1.21]],["body/interfaces/UserPayload.html",[12,0.031,19,0.261,20,0.226,21,0.226,24,0.734,25,0.552,30,1.652,39,2.941,47,0.261,48,0.129,49,0.019,50,0.019,58,0.504,63,2.254,69,1.094,70,0.65,83,1.392,104,1.5,112,1.637,113,2.183,114,1.257,115,1.623,124,0.853,127,1.5,129,1.37,131,1.509,132,1.834,133,2.597,134,1.834,137,1.257,139,1.901,146,1.652,149,1.834,150,1.156,151,1.652,152,1.652,163,3.687,173,1.652,202,1.834,238,1.834,239,1.834,240,2.062,241,2.367,244,2.367,245,3.015,247,2.367,248,2.367,249,2.367,250,2.062,251,1.257,252,2.367,253,1.065,254,2.367,255,2.367,256,2.367,257,2.367,258,3.015,259,2.367,260,2.92,261,1.37,262,1.834,263,2.367,302,1.5]],["title/classes/UserPayloadDto.html",[48,0.146,251,1.427]],["body/classes/UserPayloadDto.html",[12,0.031,19,0.299,20,0.259,21,0.259,24,0.583,31,1.72,33,2.364,47,0.406,48,0.228,49,0.021,50,0.021,52,1.72,58,0.578,64,2.846,66,1.466,69,1.466,70,0.87,112,1.8,113,2.044,114,2.223,115,1.899,116,2.713,120,3.21,121,4.314,122,3.646,123,1.894,139,1.8,211,2.102,216,2.102,251,1.957,261,2.424,319,1.72,320,2.364,323,3.685,324,2.713,361,3.245,362,3.245,363,3.245,364,3.245,365,3.245]],["title/controllers/UsersController.html",[54,1.556,366,2.082]],["body/controllers/UsersController.html",[12,0.031,19,0.176,20,0.152,21,0.152,24,0.634,25,0.372,44,2.696,46,0.847,47,0.176,48,0.087,49,0.014,50,0.014,54,0.923,57,1.389,58,0.34,59,1.219,64,2.206,66,1.136,68,1.566,69,1.415,70,0.84,71,1.231,72,1.7,77,2.428,78,1.594,79,1.594,80,1.389,81,1.594,82,1.594,83,1.569,84,1.389,85,2.496,86,1.389,89,1.235,92,1.011,93,1.389,95,1.235,96,1.389,99,3.774,113,1.7,115,1.661,139,2.176,150,1.219,251,1.848,261,2.015,265,2.926,267,1.389,268,2.174,269,1.389,281,1.235,282,1.235,283,1.594,296,1.235,305,2.679,319,2.206,357,1.113,360,1.389,366,1.934,367,1.594,368,1.594,369,2.496,370,3.075,371,2.496,372,3.075,373,1.594,374,1.906,375,1.906,376,1.594,377,4.186,378,3.479,379,1.906,380,1.906,381,1.594,382,1.906,383,1.906,384,1.906,385,1.906,386,1.906,387,4.516,388,2.984,389,1.906,390,1.906,391,1.949,392,1.594,393,1.906,394,1.906,395,1.906,396,1.906,397,1.906,398,1.906,399,1.906,400,1.906,401,1.906,402,1.906,403,1.906,404,1.906,405,1.906,406,1.906,407,1.906,408,1.906,409,1.906,410,4.005,411,1.906,412,1.906,413,1.906,414,1.906]],["title/modules/UsersModule.html",[0,1.116,15,1.876]],["body/modules/UsersModule.html",[0,1.88,2,1.689,3,1.689,4,2.015,5,2.015,6,1.689,7,2.869,8,2.015,12,0.03,15,3.533,16,2.594,17,2.015,18,1.841,19,0.35,20,0.304,21,0.304,24,0.716,25,0.741,46,2.174,47,0.35,48,0.173,49,0.023,50,0.023,366,3.507,391,3.209,392,3.179,415,3.179,416,3.179,417,3.802,418,3.802]],["title/injectables/UsersService.html",[124,0.684,391,1.704]],["body/injectables/UsersService.html",[12,0.032,19,0.13,20,0.113,21,0.113,24,0.585,25,0.275,39,2.625,44,2.509,45,1.18,47,0.13,48,0.064,49,0.011,50,0.011,58,0.251,59,0.956,63,1.691,66,1.057,68,1.458,69,1.387,70,0.779,71,1.146,72,1.426,77,2.038,83,1.213,89,0.914,95,0.914,113,1.706,114,1.551,115,0.75,124,0.498,125,0.627,127,2.753,129,0.683,130,1.18,131,1.314,137,1.04,144,2.262,145,0.914,146,0.823,147,1.18,148,1.028,150,2.162,151,2.437,152,1.366,153,2.262,154,1.851,155,2.509,183,1.958,209,1.18,210,1.028,227,1.028,251,1.551,258,1.517,260,1.028,261,1.875,262,1.517,291,1.18,302,0.748,305,2.185,319,1.851,346,1.18,354,1.18,356,0.914,357,1.366,358,2.262,360,1.705,368,1.18,369,1.958,370,2.92,371,1.958,372,2.509,373,1.958,376,1.958,377,3.492,378,2.92,381,1.958,391,1.241,410,4.017,419,1.18,420,1.411,421,1.411,422,1.411,423,1.411,424,1.411,425,1.411,426,2.341,427,1.411,428,2.341,429,1.411,430,1.411,431,1.411,432,2.509,433,1.411,434,1.411,435,1.411,436,1.411,437,1.411,438,2.341,439,1.411,440,1.411,441,1.411,442,1.411,443,1.411,444,1.958,445,1.411,446,2.341,447,1.411,448,1.411,449,2.341,450,1.411,451,1.411,452,1.411,453,1.18,454,1.411,455,1.411,456,1.411,457,2.341,458,1.411,459,2.341,460,1.411,461,1.411,462,1.411,463,1.411,464,1.411,465,2.341,466,1.411,467,1.411,468,1.411,469,2.341,470,1.411]],["title/coverage.html",[471,3.189]],["body/coverage.html",[6,1.046,12,0.031,21,0.188,31,1.248,48,0.226,49,0.017,50,0.017,51,1.526,53,1.969,54,2.029,55,1.526,56,1.969,60,1.715,70,0.382,74,1.374,87,1.248,91,1.715,92,1.248,104,1.248,111,1.969,124,1.147,126,1.969,131,0.886,137,1.046,154,1.248,171,1.715,172,1.969,211,1.526,212,1.969,234,1.969,240,2.555,245,1.526,251,1.046,253,1.748,264,1.715,265,1.526,267,1.715,268,2.555,269,1.715,270,1.969,280,1.715,281,2.272,282,2.272,296,1.526,301,1.526,303,1.969,304,2.555,312,1.969,319,1.248,320,2.555,325,1.526,326,1.969,334,1.248,344,1.969,355,1.526,356,2.272,357,1.374,358,1.526,359,1.969,366,1.526,367,1.969,391,1.248,419,1.969,471,1.715,472,1.969,473,2.355,474,2.355,475,3.382,476,4.19,477,1.969,478,6.426,479,5.762,480,1.969,481,4.964,482,1.969,483,5.539,484,3.507,485,1.969,486,1.969,487,2.933,488,4.964,489,1.969,490,3.507,491,2.355,492,2.355,493,2.355]],["title/dependencies.html",[3,1.716,494,2.247]],["body/dependencies.html",[3,1.511,12,0.031,25,0.663,35,2.845,48,0.207,49,0.022,50,0.022,90,2.478,108,2.478,123,1.986,134,2.948,137,1.511,148,2.478,204,2.845,205,2.845,206,2.845,210,2.478,238,2.204,250,3.314,279,2.845,495,3.402,496,3.402,497,3.402,498,5.126,499,3.402,500,3.402,501,3.402,502,3.402,503,3.402,504,3.402,505,3.402,506,3.402,507,4.55,508,3.402,509,3.402,510,3.402,511,4.55,512,3.402,513,3.402,514,3.402,515,3.402,516,4.55,517,3.402,518,3.402,519,3.402,520,3.402,521,3.402,522,3.402,523,3.402,524,3.402,525,3.402,526,3.402,527,3.402]],["title/miscellaneous/functions.html",[528,1.741,529,3.231]],["body/miscellaneous/functions.html",[6,2.623,12,0.026,49,0.026,50,0.026,58,0.822,475,3.362,477,4.939,480,4.939,489,3.86,528,2.991,529,3.86,530,4.615,531,4.616]],["title/index.html",[58,0.479,532,2.687,533,2.687]],["body/index.html",[12,0.029,18,2.402,20,0.166,49,0.015,50,0.015,80,1.512,453,1.736,471,1.512,472,2.666,534,2.076,535,2.076,536,3.881,537,3.188,538,2.076,539,2.076,540,2.076,541,2.076,542,3.188,543,1.736,544,3.881,545,2.076,546,2.076,547,4.354,548,2.076,549,4.354,550,5.329,551,2.076,552,5.164,553,2.076,554,2.076,555,2.076,556,3.188,557,2.076,558,3.188,559,2.076,560,3.881,561,2.076,562,3.188,563,2.076,564,2.076,565,2.076,566,2.076,567,2.076,568,4.354,569,5.329,570,4.959,571,2.076,572,3.188,573,2.076,574,2.076,575,2.076,576,2.076,577,4.959,578,3.188,579,4.354,580,2.076,581,3.188,582,2.076,583,2.076,584,3.188,585,4.698,586,4.354,587,2.076,588,3.188,589,2.076,590,2.076,591,2.076,592,2.076,593,4.354,594,2.076,595,2.076,596,2.076,597,2.076,598,2.076,599,3.188,600,2.076,601,2.076,602,2.076,603,2.076,604,2.076,605,3.188,606,2.076,607,2.076,608,2.076,609,3.188,610,2.076,611,2.076,612,3.641,613,3.188,614,2.076,615,2.076,616,2.076,617,2.076,618,2.076,619,2.076,620,2.076,621,2.076,622,3.188,623,2.076,624,2.076,625,2.076,626,2.076,627,3.881,628,2.076,629,2.076,630,2.076,631,2.076,632,2.076,633,2.076,634,3.188,635,2.076,636,2.076,637,2.076,638,2.076,639,2.076,640,3.188,641,2.076,642,2.076,643,2.076,644,3.188,645,3.188,646,2.076,647,2.076,648,2.076,649,2.076,650,2.076,651,2.076,652,2.076,653,2.076,654,2.076,655,2.076,656,2.076,657,1.736,658,2.076,659,2.076,660,2.076,661,2.076,662,2.076,663,2.076,664,1.736]],["title/modules.html",[2,1.945]],["body/modules.html",[1,2.85,2,1.954,11,2.567,12,0.025,13,2.567,14,2.567,15,2.567,49,0.025,50,0.025,612,5.163,665,6.173,666,6.173,667,6.173]],["title/overview.html",[668,3.661]],["body/overview.html",[0,1.114,1,3.994,2,1.425,3,1.425,4,1.7,5,1.7,6,1.425,7,1.7,8,1.7,9,2.682,10,2.682,11,3.446,12,0.03,13,3.367,14,3.263,15,3.263,16,2.318,17,1.7,18,1.553,46,1.425,49,0.021,50,0.021,52,1.7,87,2.637,102,2.682,103,2.682,104,2.637,125,1.425,131,2.223,264,2.337,302,1.7,306,2.682,307,2.682,308,2.682,334,2.637,340,2.682,341,2.682,391,2.637,415,2.682,416,2.682,444,2.682,668,2.682,669,4.372,670,3.207,671,3.207,672,3.207]],["title/properties.html",[112,1.578,494,2.247]],["body/properties.html",[12,0.03,49,0.027,50,0.027,112,1.95,543,3.991,657,3.991,664,3.991,673,4.772,674,4.772,675,4.772]],["title/miscellaneous/variables.html",[528,1.741,676,3.231]],["body/miscellaneous/variables.html",[12,0.031,49,0.022,50,0.022,58,0.626,60,3.388,70,0.754,83,1.221,91,2.561,115,1.671,137,2.066,144,2.278,150,1.436,154,1.864,276,2.94,280,3.388,281,2.278,282,2.278,287,2.94,289,2.94,295,3.889,296,3.377,313,2.94,432,2.94,475,2.561,482,3.889,485,2.94,486,3.889,487,4.358,528,2.278,531,3.889,676,2.94,677,3.516,678,4.65,679,5.767,680,5.767,681,3.516,682,3.516,683,3.516,684,3.516,685,3.516,686,3.516]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":674,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["0.43.0",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["1.4.12",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["1024",{"_index":191,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["11.0.0",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":190,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["2.0.0",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["2mb",{"_index":193,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["3",{"_index":670,"title":{},"body":{"overview.html":{}}}],["4",{"_index":672,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":669,"title":{},"body":{"overview.html":{}}}],["6.4.0",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["6.8.2",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["7",{"_index":671,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":232,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["8.1.0",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["9.8.0",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["90d",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["_args",{"_index":220,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["allowedtypes",{"_index":195,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["allowedtypes.includes(file.mimetype",{"_index":199,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["allowing",{"_index":600,"title":{},"body":{"index.html":{}}}],["already",{"_index":442,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":650,"title":{},"body":{"index.html":{}}}],["application",{"_index":570,"title":{},"body":{"index.html":{}}}],["application/pdf",{"_index":198,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["applications",{"_index":542,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["argon.hash(password",{"_index":429,"title":{},"body":{"injectables/UsersService.html":{}}}],["argon.verify(user.password",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["argon2id$v=19$m=65536,t=3,p=4$otfbljjwfxlyr8hj8i8lrq$7vd6lywlfrzgxsawiuwxfmkrh6o9t0jlw+/f4wwyilq",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":51,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":292,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["authguard",{"_index":237,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('jwt",{"_index":235,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":657,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorized",{"_index":268,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["authpayloaddto",{"_index":74,"title":{"classes/AuthPayloadDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authservice",{"_index":87,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":588,"title":{},"body":{"index.html":{}}}],["backers",{"_index":651,"title":{},"body":{"index.html":{}}}],["based",{"_index":583,"title":{},"body":{"index.html":{}}}],["board",{"_index":643,"title":{},"body":{"index.html":{}}}],["body",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":667,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":665,"title":{},"body":{"modules.html":{}}}],["building",{"_index":537,"title":{},"body":{"index.html":{}}}],["can't",{"_index":434,"title":{},"body":{"injectables/UsersService.html":{}}}],["canactivate",{"_index":271,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["canactivate(context",{"_index":275,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["catch",{"_index":437,"title":{},"body":{"injectables/UsersService.html":{}}}],["cb",{"_index":181,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["cb(new",{"_index":200,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["cb(null",{"_index":186,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["channel",{"_index":615,"title":{},"body":{"index.html":{}}}],["character",{"_index":231,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["characters",{"_index":233,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["check",{"_index":577,"title":{},"body":{"index.html":{}}}],["class",{"_index":48,"title":{"classes/Auth.html":{},"classes/AuthPayloadDto.html":{},"classes/IsPasswordPolicy.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":52,"title":{},"body":{"classes/Auth.html":{},"classes/AuthPayloadDto.html":{},"classes/IsPasswordPolicy.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{},"overview.html":{}}}],["clicks",{"_index":599,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":582,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":306,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":307,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":308,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":340,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_providers",{"_index":341,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":415,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":416,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":606,"title":{},"body":{"index.html":{}}}],["config",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["config.get('database_url",{"_index":318,"title":{},"body":{"injectables/PrismaService.html":{}}}],["config.get('jwt_secret",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["configmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["const",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UploadService.html":{},"interfaces/UserPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["constructor(config",{"_index":242,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["constructor(prisma",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":272,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["contains",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{}}}],["context",{"_index":278,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["context.gethandler",{"_index":286,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":288,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["controller",{"_index":54,"title":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('upload",{"_index":336,"title":{},"body":{"controllers/UploadController.html":{}}}],["controller('users",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":621,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":471,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":435,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdat",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(payload",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["csrf",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":432,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["datasources",{"_index":315,"title":{},"body":{"injectables/PrismaService.html":{}}}],["db",{"_index":316,"title":{},"body":{"injectables/PrismaService.html":{}}}],["dbuser",{"_index":293,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["dbuser!.role.permissions.some",{"_index":297,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":617,"title":{},"body":{"index.html":{}}}],["default",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":215,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["defaultmessage(_args",{"_index":217,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["defined",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":568,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":587,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":578,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":598,"title":{},"body":{"index.html":{}}}],["desc",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["description",{"_index":543,"title":{},"body":{"index.html":{},"properties.html":{}}}],["destination",{"_index":177,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["development",{"_index":553,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":629,"title":{},"body":{"index.html":{}}}],["disable",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["discord",{"_index":614,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":176,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["dive",{"_index":616,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":472,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dummy_password",{"_index":482,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":563,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":538,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":575,"title":{},"body":{"index.html":{}}}],["email",{"_index":113,"title":{},"body":{"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserPayloadDto.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":573,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":633,"title":{},"body":{"index.html":{}}}],["error",{"_index":438,"title":{},"body":{"injectables/UsersService.html":{}}}],["error('invalid",{"_index":201,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["error.code",{"_index":440,"title":{},"body":{"injectables/UsersService.html":{}}}],["eslint",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["example",{"_index":549,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":276,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["existed",{"_index":443,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["experience",{"_index":619,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":205,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":330,"title":{},"body":{"controllers/UploadController.html":{},"injectables/UploadService.html":{}}}],["express.request",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ext",{"_index":184,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["extends",{"_index":173,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["extname",{"_index":207,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["extname(file.originalname",{"_index":185,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["extractjwt",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":255,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["faker",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":202,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["fast",{"_index":591,"title":{},"body":{"index.html":{}}}],["features",{"_index":602,"title":{},"body":{"index.html":{}}}],["few",{"_index":593,"title":{},"body":{"index.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.filename",{"_index":351,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.originalname",{"_index":350,"title":{},"body":{"injectables/UploadService.html":{}}}],["filefilter",{"_index":194,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["fileinterceptor",{"_index":203,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["fileinterceptor('file",{"_index":174,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["filename",{"_index":179,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"injectables/UploadService.html":{}}}],["filesize",{"_index":189,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["fileuploadinterceptor",{"_index":171,"title":{"injectables/FileUploadInterceptor.html":{}},"body":{"injectables/FileUploadInterceptor.html":{},"coverage.html":{}}}],["filter",{"_index":357,"title":{},"body":{"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["focus",{"_index":601,"title":{},"body":{"index.html":{}}}],["follow",{"_index":637,"title":{},"body":{"index.html":{}}}],["forbiddenexception",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('no",{"_index":352,"title":{},"body":{"injectables/UploadService.html":{}}}],["forbiddenexception('user",{"_index":291,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(`missing",{"_index":300,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["forbiddenexception(`password",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(`user",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":536,"title":{},"body":{"index.html":{}}}],["full",{"_index":632,"title":{},"body":{"index.html":{}}}],["function",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":529,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":596,"title":{},"body":{"index.html":{}}}],["get(':slug",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('lists",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('me",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getme(@getme",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(user",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["getrandomroleid",{"_index":477,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getting",{"_index":532,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettoken(userid",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["global",{"_index":310,"title":{},"body":{"modules/PrismaModule.html":{}}}],["graph",{"_index":624,"title":{},"body":{"index.html":{}}}],["grow",{"_index":647,"title":{},"body":{"index.html":{}}}],["guard",{"_index":264,"title":{"guards/OnlyAuthorizedRoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":266,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["hands",{"_index":618,"title":{},"body":{"index.html":{}}}],["handy",{"_index":607,"title":{},"body":{"index.html":{}}}],["has_permission_key",{"_index":280,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword",{"_index":428,"title":{},"body":{"injectables/UsersService.html":{}}}],["haspermission",{"_index":296,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["haspermission('create_user",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["haspermission('detail_user",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["haspermission('edit_user",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["haspermission('list_user",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["helmet",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":622,"title":{},"body":{"index.html":{}}}],["here",{"_index":655,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":661,"title":{},"body":{"index.html":{}}}],["id",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":473,"title":{},"body":{"coverage.html":{}}}],["image/jpeg",{"_index":196,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["image/png",{"_index":197,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["implements",{"_index":213,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["include",{"_index":227,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UsersService.html":{}}}],["incorrect",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":58,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":580,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":604,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":124,"title":{"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"injectables/UploadService.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["install",{"_index":595,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":551,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":439,"title":{},"body":{"injectables/UsersService.html":{}}}],["interact",{"_index":625,"title":{},"body":{"index.html":{}}}],["interface",{"_index":253,"title":{"interfaces/PaginationParmas.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/PaginationParmas.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["interface.ts",{"_index":304,"title":{},"body":{"interfaces/PaginationParmas.html":{},"interfaces/UserFilterInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":302,"title":{},"body":{"interfaces/PaginationParmas.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["interfaces.ts",{"_index":359,"title":{},"body":{"interfaces/UserInterface.html":{},"coverage.html":{}}}],["isemail",{"_index":120,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isemail()@isnotempty",{"_index":116,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isglobal",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":121,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isoptional",{"_index":323,"title":{},"body":{"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isoptional()@isstring",{"_index":321,"title":{},"body":{"classes/UpdateUserPayloadDto.html":{}}}],["ispasswordpolicy",{"_index":31,"title":{"classes/IsPasswordPolicy.html":{}},"body":{"modules/AppModule.html":{},"classes/IsPasswordPolicy.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{},"coverage.html":{}}}],["isstring",{"_index":122,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["isstring()@isnotempty",{"_index":118,"title":{},"body":{"classes/AuthPayloadDto.html":{}}}],["isstring()@isnotempty()@validate(ispasswordpolicy",{"_index":363,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["job",{"_index":640,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":642,"title":{},"body":{"index.html":{}}}],["join",{"_index":653,"title":{},"body":{"index.html":{}}}],["js/faker",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":254,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["jwtguard",{"_index":92,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtGuard.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":104,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":658,"title":{},"body":{"index.html":{}}}],["key",{"_index":571,"title":{},"body":{"index.html":{}}}],["learn",{"_index":610,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":664,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":645,"title":{},"body":{"index.html":{}}}],["limit",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"interfaces/PaginationParmas.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limits",{"_index":188,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["linkedin",{"_index":639,"title":{},"body":{"index.html":{}}}],["literal",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["looking",{"_index":581,"title":{},"body":{"index.html":{}}}],["loop",{"_index":635,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":229,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["main",{"_index":480,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["makes",{"_index":589,"title":{},"body":{"index.html":{}}}],["managing",{"_index":603,"title":{},"body":{"index.html":{}}}],["matching",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["mau",{"_index":585,"title":{},"body":{"index.html":{}}}],["max",{"_index":192,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["me.decorator.ts",{"_index":486,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["me/get",{"_index":485,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":346,"title":{},"body":{"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["meta",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{}}}],["metadata",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mimetype",{"_index":349,"title":{},"body":{"injectables/UploadService.html":{}}}],["miscellaneous",{"_index":528,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":644,"title":{},"body":{"index.html":{}}}],["mode",{"_index":556,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":579,"title":{},"body":{"index.html":{}}}],["multer",{"_index":206,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"dependencies.html":{}}}],["myśliwiec",{"_index":659,"title":{},"body":{"index.html":{}}}],["name",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":630,"title":{},"body":{"index.html":{}}}],["nest",{"_index":544,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":663,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":569,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["nestjs/core",{"_index":279,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mau",{"_index":597,"title":{},"body":{"index.html":{}}}],["nestjs/passport",{"_index":238,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":204,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node.js",{"_index":535,"title":{},"body":{"index.html":{}}}],["npm",{"_index":550,"title":{},"body":{"index.html":{}}}],["null",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["number",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"interfaces/PaginationParmas.html":{},"classes/UpdateUserPayloadDto.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{}}}],["number(roleid",{"_index":433,"title":{},"body":{"injectables/UsersService.html":{}}}],["offer",{"_index":641,"title":{},"body":{"index.html":{}}}],["official",{"_index":586,"title":{},"body":{"index.html":{}}}],["omit",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["onlyauthorizedroleguard",{"_index":265,"title":{"guards/OnlyAuthorizedRoleGuard.html":{}},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["onlyauthorizedroleguard)@haspermission('create_user')@post('create",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["onlyauthorizedroleguard)@haspermission('detail_user')@get(':slug",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["onlyauthorizedroleguard)@haspermission('edit_user')@patch('/:slug/edit",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["onlyauthorizedroleguard)@haspermission('list_user')@get('lists",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["open",{"_index":646,"title":{},"body":{"index.html":{}}}],["optional",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["originalname",{"_index":347,"title":{},"body":{"injectables/UploadService.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":668,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":441,"title":{},"body":{"injectables/UsersService.html":{}}}],["package",{"_index":494,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":305,"title":{},"body":{"interfaces/PaginationParmas.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pagination",{"_index":360,"title":{},"body":{"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["paginationparmas",{"_index":301,"title":{"interfaces/PaginationParmas.html":{}},"body":{"interfaces/PaginationParmas.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["param",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/PrismaService.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["part",{"_index":631,"title":{},"body":{"index.html":{}}}],["passport",{"_index":250,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["passportstrategy(strategy",{"_index":241,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["password",{"_index":114,"title":{},"body":{"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserPayloadDto.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"injectables/UsersService.html":{}}}],["passwordmatch",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/:slug/edit",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":208,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["payload",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["payload.sub",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["permission",{"_index":295,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["permission.decorator",{"_index":283,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{}}}],["permission.decorator.ts",{"_index":487,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["permission/has",{"_index":282,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissions",{"_index":294,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["platform",{"_index":584,"title":{},"body":{"index.html":{}}}],["please",{"_index":613,"title":{},"body":{"index.html":{}}}],["policy.validation",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["policy.validation.ts",{"_index":212,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"coverage.html":{}}}],["policy.validation.ts:11",{"_index":222,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["policy.validation.ts:15",{"_index":219,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["possible",{"_index":576,"title":{},"body":{"index.html":{}}}],["post",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["post('create",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('file",{"_index":337,"title":{},"body":{"controllers/UploadController.html":{}}}],["post('signin",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["prisma.service",{"_index":311,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/.../seed.ts",{"_index":531,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":427,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/prisma.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/seed.ts",{"_index":475,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":313,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismaclientknownrequesterror",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["prismamodule",{"_index":13,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":131,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{}}}],["production",{"_index":558,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":534,"title":{},"body":{"index.html":{}}}],["project",{"_index":547,"title":{},"body":{"index.html":{}}}],["promise",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{}}}],["properties",{"_index":112,"title":{"properties.html":{}},"body":{"classes/AuthPayloadDto.html":{},"interfaces/PaginationParmas.html":{},"classes/UpdateUserPayloadDto.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('email",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('name",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('roleid",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":611,"title":{},"body":{"index.html":{}}}],["read",{"_index":654,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":567,"title":{},"body":{"index.html":{}}}],["real",{"_index":626,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":273,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["repository",{"_index":546,"title":{},"body":{"index.html":{}}}],["req",{"_index":180,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["request",{"_index":287,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":289,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"miscellaneous/variables.html":{}}}],["requiredpermission",{"_index":284,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["requiring",{"_index":592,"title":{},"body":{"index.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":605,"title":{},"body":{"index.html":{}}}],["rest",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"interfaces/UserPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["role.guard",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["role.guard.ts",{"_index":270,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"coverage.html":{}}}],["role.guard.ts:14",{"_index":274,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["role.guard.ts:20",{"_index":277,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["role/only",{"_index":269,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["roleid",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UpdateUserPayloadDto.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rp",{"_index":298,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["rp.permission.name",{"_index":299,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["run",{"_index":552,"title":{},"body":{"index.html":{}}}],["runs",{"_index":574,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["sanitizedusers",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{}}}],["scalable",{"_index":539,"title":{},"body":{"index.html":{}}}],["secret",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":256,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["select",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["server",{"_index":540,"title":{},"body":{"index.html":{}}}],["setmetadata(has_permission_key",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":548,"title":{},"body":{"index.html":{}}}],["side",{"_index":541,"title":{},"body":{"index.html":{}}}],["signin",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(payload",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["simple",{"_index":594,"title":{},"body":{"index.html":{}}}],["size",{"_index":348,"title":{},"body":{"injectables/UploadService.html":{}}}],["skip",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":230,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["sponsors",{"_index":649,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../has",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":530,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":111,"title":{},"body":{"classes/AuthPayloadDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:10",{"_index":119,"title":{},"body":{"classes/AuthPayloadDto.html":{}}}],["src/auth/dto/auth.dto.ts:6",{"_index":117,"title":{},"body":{"classes/AuthPayloadDto.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":53,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/decorators/get",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/has",{"_index":281,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guard",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["src/guard/jwt.guard.ts",{"_index":234,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/guard/jwt.guard.ts:5",{"_index":236,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["src/guard/only",{"_index":267,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/interceptors/upload/upload.interceptor.ts",{"_index":172,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"coverage.html":{}}}],["src/interfaces/pagination",{"_index":303,"title":{},"body":{"interfaces/PaginationParmas.html":{},"coverage.html":{}}}],["src/interfaces/users/user",{"_index":356,"title":{},"body":{"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":489,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module.ts",{"_index":309,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":312,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:7",{"_index":314,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/strategy",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/strategy/jwt.strategy.ts",{"_index":240,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["src/strategy/jwt.strategy.ts:15",{"_index":243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/strategy/jwt.strategy.ts:26",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/upload/upload.controller.ts",{"_index":326,"title":{},"body":{"controllers/UploadController.html":{},"coverage.html":{}}}],["src/upload/upload.controller.ts:11",{"_index":332,"title":{},"body":{"controllers/UploadController.html":{}}}],["src/upload/upload.module.ts",{"_index":342,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/upload/upload.service.ts",{"_index":344,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/upload/upload.service.ts:6",{"_index":345,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/users/dto",{"_index":252,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["src/users/dto/users.dto.ts",{"_index":320,"title":{},"body":{"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{},"coverage.html":{}}}],["src/users/dto/users.dto.ts:13",{"_index":361,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/dto/users.dto.ts:18",{"_index":364,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/dto/users.dto.ts:21",{"_index":362,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/dto/users.dto.ts:24",{"_index":365,"title":{},"body":{"classes/UserPayloadDto.html":{}}}],["src/users/dto/users.dto.ts:30",{"_index":322,"title":{},"body":{"classes/UpdateUserPayloadDto.html":{}}}],["src/users/users.controller.ts",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:25",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:32",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":417,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:113",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:13",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:47",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:93",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/validators/password",{"_index":211,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{},"coverage.html":{}}}],["start",{"_index":554,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":557,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":559,"title":{},"body":{"index.html":{}}}],["started",{"_index":533,"title":{"index.html":{}},"body":{}}],["starter",{"_index":545,"title":{},"body":{"index.html":{}}}],["statements",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":634,"title":{},"body":{"index.html":{}}}],["steps",{"_index":572,"title":{},"body":{"index.html":{}}}],["storage",{"_index":175,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["straightforward",{"_index":590,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":249,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["string",{"_index":115,"title":{},"body":{"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserPayloadDto.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["succesfully",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["success",{"_index":436,"title":{},"body":{"injectables/UsersService.html":{}}}],["successfully",{"_index":354,"title":{},"body":{"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":239,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"interfaces/UserPayload.html":{}}}],["support",{"_index":612,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":666,"title":{},"body":{"modules.html":{}}}],["table",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["test",{"_index":562,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":565,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":564,"title":{},"body":{"index.html":{}}}],["tests",{"_index":560,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":648,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(payload",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('jwt_secret",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettoken(user.id",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.signasync(payload",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.$transaction",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.count",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.create",{"_index":431,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.get",{"_index":285,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["this.uploadservice.uploadfile(file",{"_index":339,"title":{},"body":{"controllers/UploadController.html":{}}}],["this.usersservice.createuser(payload",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuser(payload",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userdetail",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userlist",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlermodule",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlers",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"injectables/UploadService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":627,"title":{},"body":{"index.html":{}}}],["token",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["totalpages",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":656,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/FileUploadInterceptor.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":430,"title":{},"body":{"injectables/UsersService.html":{}}}],["ttl",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":662,"title":{},"body":{"index.html":{}}}],["type",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthPayloadDto.html":{},"injectables/AuthService.html":{},"injectables/FileUploadInterceptor.html":{},"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/PaginationParmas.html":{},"injectables/PrismaService.html":{},"classes/UpdateUserPayloadDto.html":{},"controllers/UploadController.html":{},"injectables/UploadService.html":{},"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["undefined",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["uniquesuffix",{"_index":182,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["uniquesuffix}${ext",{"_index":187,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["unit",{"_index":561,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":675,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["updates",{"_index":636,"title":{},"body":{"index.html":{}}}],["updateuser",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(payload",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserpayloaddto",{"_index":319,"title":{"classes/UpdateUserPayloadDto.html":{}},"body":{"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upload",{"_index":327,"title":{},"body":{"controllers/UploadController.html":{},"injectables/UploadService.html":{}}}],["upload.controller",{"_index":343,"title":{},"body":{"modules/UploadModule.html":{}}}],["upload.service",{"_index":335,"title":{},"body":{"controllers/UploadController.html":{},"modules/UploadModule.html":{}}}],["upload/upload.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadcontroller",{"_index":325,"title":{"controllers/UploadController.html":{}},"body":{"controllers/UploadController.html":{},"modules/UploadModule.html":{},"coverage.html":{}}}],["uploaded",{"_index":353,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadedfile",{"_index":333,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadfile",{"_index":328,"title":{},"body":{"controllers/UploadController.html":{},"injectables/UploadService.html":{}}}],["uploadfile(@uploadedfile",{"_index":338,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadfile(file",{"_index":329,"title":{},"body":{"controllers/UploadController.html":{},"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":14,"title":{"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["uploads",{"_index":178,"title":{},"body":{"injectables/FileUploadInterceptor.html":{}}}],["uploadservice",{"_index":334,"title":{"injectables/UploadService.html":{}},"body":{"controllers/UploadController.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["uppercase",{"_index":228,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["url",{"_index":317,"title":{},"body":{"injectables/PrismaService.html":{}}}],["useguards",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtguard",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UploadController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtguard)@get('me",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtguard)@post('file",{"_index":331,"title":{},"body":{"controllers/UploadController.html":{}}}],["user",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/OnlyAuthorizedRoleGuard.html":{},"interfaces/UserInterface.html":{},"interfaces/UserPayload.html":{},"injectables/UsersService.html":{}}}],["user.email",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":290,"title":{},"body":{"guards/OnlyAuthorizedRoleGuard.html":{}}}],["userdetail",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdetail(@param",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdetail(params",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userfilterinterface",{"_index":355,"title":{"interfaces/UserFilterInterface.html":{}},"body":{"interfaces/UserFilterInterface.html":{},"interfaces/UserInterface.html":{},"coverage.html":{}}}],["userid",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["userinterface",{"_index":358,"title":{"interfaces/UserInterface.html":{}},"body":{"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userlist",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userlist(page",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["userlist(undefined",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["userpayload",{"_index":245,"title":{"interfaces/UserPayload.html":{}},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["userpayloaddto",{"_index":251,"title":{"classes/UserPayloadDto.html":{}},"body":{"injectables/JwtStrategy.html":{},"classes/UpdateUserPayloadDto.html":{},"interfaces/UserPayload.html":{},"classes/UserPayloadDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":418,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":366,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":15,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":391,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":628,"title":{},"body":{"index.html":{}}}],["uuid",{"_index":210,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":183,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"injectables/UsersService.html":{}}}],["v4",{"_index":209,"title":{},"body":{"injectables/FileUploadInterceptor.html":{},"injectables/UsersService.html":{}}}],["validate",{"_index":216,"title":{},"body":{"classes/IsPasswordPolicy.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["validate(ispasswordpolicy",{"_index":324,"title":{},"body":{"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{}}}],["validate(password",{"_index":221,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validate(payload",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPayload.html":{}}}],["validationarguments",{"_index":218,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validator",{"_index":123,"title":{},"body":{"classes/AuthPayloadDto.html":{},"classes/IsPasswordPolicy.html":{},"classes/UpdateUserPayloadDto.html":{},"classes/UserPayloadDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":223,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validatorconstraintinterface",{"_index":214,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["validators/password",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["value",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":676,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":673,"title":{},"body":{"properties.html":{}}}],["video",{"_index":620,"title":{},"body":{"index.html":{}}}],["visit",{"_index":609,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":623,"title":{},"body":{"index.html":{}}}],["watch",{"_index":555,"title":{},"body":{"index.html":{}}}],["weak",{"_index":226,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["website",{"_index":660,"title":{},"body":{"index.html":{}}}],["where.email",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["where.name",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["where.roleid",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["working",{"_index":608,"title":{},"body":{"index.html":{}}}],["x",{"_index":638,"title":{},"body":{"index.html":{}}}],["yes",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["you'd",{"_index":652,"title":{},"body":{"index.html":{}}}],["you're",{"_index":566,"title":{},"body":{"index.html":{}}}],["z])(?=.*[a",{"_index":224,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_]).{8,}$/.test(password",{"_index":225,"title":{},"body":{"classes/IsPasswordPolicy.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/UploadModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UploadModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { IsPasswordPolicy } from './validators/password-policy.validation';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { UploadModule } from './upload/upload.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthModule,\n    PrismaModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    ThrottlerModule.forRoot({\n      throttlers: [\n        {\n          ttl: 60000,\n          limit: 10,\n        },\n      ],\n    }),\n    UploadModule,\n  ],\n  controllers: [],\n  providers: [IsPasswordPolicy],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getMe\n                            \n                            \n                                    \n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     User\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(payload: AuthPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            AuthPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unsafe-return */\nimport { Controller, Post, Body, Get, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthPayloadDto } from './dto';\nimport { User } from '@prisma/client';\nimport { GetMe } from 'src/decorators/get-me';\nimport { JwtGuard } from 'src/guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('signin')\n  signin(@Body() payload: AuthPayloadDto) {\n    return this.authService.signin(payload);\n  }\n\n  @UseGuards(JwtGuard)\n  @Get('me')\n  getMe(@GetMe() user: User) {\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from 'src/strategy';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  imports: [JwtModule.register({})],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthPayloadDto.html":{"url":"classes/AuthPayloadDto.html","title":"class - AuthPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthPayloadDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getToken\n                            \n                            \n                                    Async\n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, config: ConfigService, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(userId: number, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(payload: AuthPayloadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            AuthPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { AuthPayloadDto } from './dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as argon from 'argon2';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private config: ConfigService,\n    private jwt: JwtService,\n  ) {}\n\n  async signin(payload: AuthPayloadDto) {\n    const { email, password } = payload;\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email,\n      },\n    });\n\n    if (!user) throw new ForbiddenException(`User does not exist`);\n\n    const passwordMatch = await argon.verify(user.password, password);\n\n    if (!passwordMatch) throw new ForbiddenException(`Password is incorrect`);\n\n    return this.getToken(user.id, user.email);\n  }\n\n  async getToken(userId: number, email: string): Promise {\n    const payload = {\n      sub: userId,\n      email,\n    };\n\n    const secret: string | undefined = this.config.get('JWT_SECRET');\n\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: '90d',\n      secret,\n    });\n\n    return { token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileUploadInterceptor.html":{"url":"injectables/FileUploadInterceptor.html","title":"injectable - FileUploadInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileUploadInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/upload/upload.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        FileInterceptor('file', {\n  storage: diskStorage({\n    destination: './uploads',\n    filename: (req, file, cb) => {\n      const uniqueSuffix = uuidv4();\n      const ext = extname(file.originalname);\n      cb(null, `${uniqueSuffix}${ext}`);\n    },\n  }),\n  limits: {\n    fileSize: 2 * 1024 * 1024, // Max 2MB\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type'), false);\n    }\n  },\n})\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { FileInterceptor } from '@nestjs/platform-express';\nimport { Injectable } from '@nestjs/common';\nimport { diskStorage } from 'multer';\nimport { extname } from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class FileUploadInterceptor extends FileInterceptor('file', {\n  storage: diskStorage({\n    destination: './uploads',\n    filename: (req, file, cb) => {\n      const uniqueSuffix = uuidv4();\n      const ext = extname(file.originalname);\n      cb(null, `${uniqueSuffix}${ext}`);\n    },\n  }),\n  limits: {\n    fileSize: 2 * 1024 * 1024, // Max 2MB\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type'), false);\n    }\n  },\n}) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsPasswordPolicy.html":{"url":"classes/IsPasswordPolicy.html","title":"class - IsPasswordPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsPasswordPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validators/password-policy.validation.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(_args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validators/password-policy.validation.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(password: string, _args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validators/password-policy.validation.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n@ValidatorConstraint({ name: 'IsPasswordPolicy', async: false })\nexport class IsPasswordPolicy implements ValidatorConstraintInterface {\n  validate(password: string, _args: ValidationArguments) {\n    return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/.test(password);\n  }\n\n  defaultMessage(_args: ValidationArguments) {\n    return 'Password too weak. Must include uppercase, lowercase, number, special character, and be at least 8 characters.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guard/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/guard/jwt.guard.ts:5\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/strategy/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: UserPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/strategy/jwt.strategy.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UserPayloadDto } from 'src/users/dto';\n\ninterface UserPayload {\n  sub: number;\n  email: string;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    config: ConfigService,\n    private prisma: PrismaService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET') as string,\n    });\n  }\n\n  async validate(payload: UserPayload) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        roleId: true,\n        password: false,\n        role: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/OnlyAuthorizedRoleGuard.html":{"url":"guards/OnlyAuthorizedRoleGuard.html","title":"guard - OnlyAuthorizedRoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    OnlyAuthorizedRoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/only-authorized-role/only-authorized-role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/only-authorized-role/only-authorized-role.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/only-authorized-role/only-authorized-role.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { HAS_PERMISSION_KEY } from 'src/decorators/has-permission/has-permission.decorator';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class OnlyAuthorizedRoleGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private prisma: PrismaService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredPermission = this.reflector.get(\n      HAS_PERMISSION_KEY,\n      context.getHandler(),\n    );\n\n    if (!requiredPermission) return true;\n\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n\n    if (!user || !user.id)\n      throw new ForbiddenException('User not authenticated');\n\n    const dbuser = await this.prisma.user.findUnique({\n      where: { id: user.id },\n      include: {\n        role: {\n          include: {\n            permissions: {\n              include: {\n                permission: true,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    const hasPermission = dbuser!.role.permissions.some(\n      (rp) => rp.permission.name === requiredPermission,\n    );\n\n    if (!hasPermission) {\n      throw new ForbiddenException(`Missing permission: ${requiredPermission}`);\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationParmas.html":{"url":"interfaces/PaginationParmas.html","title":"interface - PaginationParmas","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationParmas\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/pagination-interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationParmas {\n  page?: number;\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class PrismaService extends PrismaClient {\n  constructor(config: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: config.get('DATABASE_URL'),\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserPayloadDto.html":{"url":"classes/UpdateUserPayloadDto.html","title":"class - UpdateUserPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Validate,\n} from 'class-validator';\nimport { IsPasswordPolicy } from 'src/validators/password-policy.validation';\n\nexport class UserPayloadDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Validate(IsPasswordPolicy)\n  password: string;\n\n  @IsNotEmpty()\n  name: string;\n\n  @IsNotEmpty()\n  roleId: number;\n}\n\nexport class UpdateUserPayloadDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('file')\n                \n            \n\n                    \n                        \n                            Defined in src/upload/upload.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UseGuards, UploadedFile } from '@nestjs/common';\nimport { UploadService } from './upload.service';\nimport { JwtGuard } from 'src/guard';\n\n@Controller('upload')\nexport class UploadController {\n  constructor(private readonly uploadService: UploadService) {}\n\n  @UseGuards(JwtGuard)\n  @Post('file')\n  uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.uploadService.uploadFile(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_providers\n\n\n\n\nUploadService\n\nUploadService\n\n\n\nUploadModule\n\nUploadModule\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadController } from './upload.controller';\nimport { UploadService } from './upload.service';\n\n@Module({\n  controllers: [UploadController],\n  providers: [UploadService]\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \nuploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/upload/upload.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { message: string; originalname: Express.Multer.File; filename: Express.Multer.File; size: Express.Multer.File; mimetype: Express.Multer.File; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UploadService {\n  uploadFile(file: Express.Multer.File) {\n    if (!file || !file.originalname || !file.filename) {\n      throw new ForbiddenException('No file was uploaded.');\n    }\n\n    const { originalname, filename, size, mimetype } = file;\n\n    return {\n      message: 'File Upload Successfully',\n      originalname,\n      filename,\n      size,\n      mimetype,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserFilterInterface.html":{"url":"interfaces/UserFilterInterface.html","title":"interface - UserFilterInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserFilterInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/users/user-filter-interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roleId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roleId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserFilterInterface {\n  email?: string;\n  name?: string;\n  roleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInterface.html":{"url":"interfaces/UserInterface.html","title":"interface - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/users/user-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            filter\n                                        \n                                \n                                \n                                        \n                                            pagination\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        filter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filter:         UserFilterInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserFilterInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pagination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pagination:         PaginationParmas\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PaginationParmas\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PaginationParmas } from '../pagination-interface';\nimport { UserFilterInterface } from './user-filter-interface';\n\nexport interface UserInterface {\n  pagination: PaginationParmas;\n  filter: UserFilterInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPayload.html":{"url":"interfaces/UserPayload.html","title":"interface - UserPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/strategy/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { UserPayloadDto } from 'src/users/dto';\n\ninterface UserPayload {\n  sub: number;\n  email: string;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    config: ConfigService,\n    private prisma: PrismaService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET') as string,\n    });\n  }\n\n  async validate(payload: UserPayload) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        roleId: true,\n        password: false,\n        role: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    });\n\n    if (!user) {\n      return null;\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPayloadDto.html":{"url":"classes/UserPayloadDto.html","title":"class - UserPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                roleId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Validate(IsPasswordPolicy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/users.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Validate,\n} from 'class-validator';\nimport { IsPasswordPolicy } from 'src/validators/password-policy.validation';\n\nexport class UserPayloadDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Validate(IsPasswordPolicy)\n  password: string;\n\n  @IsNotEmpty()\n  name: string;\n\n  @IsNotEmpty()\n  roleId: number;\n}\n\nexport class UpdateUserPayloadDto {\n  @IsOptional()\n  @IsString()\n  name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                updateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                userDetail\n                            \n                            \n                                    \n                                    \n                                    \n                                userList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(payload: UserPayloadDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)@HasPermission('create_user')@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(payload: UpdateUserPayloadDto, params: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)@HasPermission('edit_user')@Patch('/:slug/edit')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UpdateUserPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userDetail\n                        \n                    \n                \n            \n            \n                \n                        \n                    userDetail(params: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)@HasPermission('detail_user')@Get(':slug')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userList\n                        \n                    \n                \n            \n            \n                \n                        \n                    userList(page?: number, limit?: number, email?: string, name?: string, roleId?: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)@HasPermission('list_user')@Get('lists')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                roleId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unsafe-return */\nimport {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { UpdateUserPayloadDto, UserPayloadDto } from './dto';\nimport { UsersService } from './users.service';\nimport { JwtGuard } from 'src/guard';\nimport { HasPermission } from 'src/decorators/has-permission/has-permission.decorator';\nimport { OnlyAuthorizedRoleGuard } from 'src/guard/only-authorized-role/only-authorized-role.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)\n  @HasPermission('create_user')\n  @Post('create')\n  createUser(@Body() payload: UserPayloadDto) {\n    return this.usersService.createUser(payload);\n  }\n\n  @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)\n  @HasPermission('list_user')\n  @Get('lists')\n  userList(\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('email') email?: string,\n    @Query('name') name?: string,\n    @Query('roleId') roleId?: number,\n  ) {\n    return this.usersService.userList({\n      filter: { email, name, roleId },\n      pagination: {\n        limit,\n        page,\n      },\n    });\n  }\n\n  @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)\n  @HasPermission('detail_user')\n  @Get(':slug')\n  userDetail(@Param() params: { slug: string }) {\n    const { slug } = params;\n    return this.usersService.userDetail({ slug });\n  }\n\n  @UseGuards(JwtGuard, OnlyAuthorizedRoleGuard)\n  @HasPermission('edit_user')\n  @Patch('/:slug/edit')\n  updateUser(\n    @Body() payload: UpdateUserPayloadDto,\n    @Param() params: { slug: string },\n  ) {\n    const { slug } = params;\n\n    return this.usersService.updateUser(payload, { slug });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                userDetail\n                            \n                            \n                                    Async\n                                userList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(payload: UserPayloadDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UserPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(payload: UpdateUserPayloadDto, params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            UpdateUserPayloadDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userDetail\n                        \n                    \n                \n            \n            \n                \n                        \n                    userDetail(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        userList\n                        \n                    \n                \n            \n            \n                \n                        \n                    userList(undefined: UserInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            UserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { UpdateUserPayloadDto, UserPayloadDto } from './dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as argon from 'argon2';\nimport { UserInterface } from 'src/interfaces/users/user-interfaces';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n  async createUser(payload: UserPayloadDto) {\n    const { email, name, password, roleId } = payload;\n\n    const hashPassword = await argon.hash(password);\n\n    try {\n      const user = await this.prisma.user.create({\n        data: {\n          email,\n          name,\n          password: hashPassword,\n          roleId: Number(roleId),\n          slug: uuidv4(),\n        },\n      });\n\n      if (!user) {\n        throw new ForbiddenException(`User can't create!`);\n      } else {\n        return {\n          success: true,\n        };\n      }\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === 'P2002') {\n          throw new ForbiddenException('User is already existed');\n        }\n      }\n    }\n  }\n\n  async userList({ filter, pagination }: UserInterface) {\n    const { limit = 10, page = 1 } = pagination;\n    const { email, name, roleId } = filter;\n\n    const where: any = {};\n\n    if (email) {\n      where.email = { contains: email };\n    }\n\n    if (name) {\n      where.name = { contains: name };\n    }\n\n    if (roleId) {\n      where.roleId = roleId;\n    }\n\n    const [users, total] = await this.prisma.$transaction([\n      this.prisma.user.findMany({\n        where,\n        skip: (page - 1) * limit,\n        take: limit,\n        include: {\n          role: true,\n        },\n        orderBy: {\n          id: 'desc',\n        },\n      }),\n      this.prisma.user.count({ where }),\n    ]);\n\n    const sanitizedUsers = users.map(({ password, ...rest }) => rest);\n\n    return {\n      data: sanitizedUsers,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  async userDetail(params: { slug: string }) {\n    const { slug } = params;\n    const user = await this.prisma.user.findUnique({\n      where: {\n        slug,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        role: true,\n        slug: true,\n        updatedAt: true,\n        createdAt: true,\n      },\n    });\n\n    return user;\n  }\n\n  async updateUser(payload: UpdateUserPayloadDto, params: { slug: string }) {\n    const { slug } = params;\n\n    const existingUser = await this.prisma.user.findUnique({ where: { slug } });\n\n    if (!existingUser) {\n      throw new ForbiddenException(`User not found`);\n    }\n\n    const updateUser = await this.prisma.user.update({\n      where: {\n        slug,\n      },\n      data: payload,\n      omit: {\n        password: true,\n      },\n    });\n\n    if (!updateUser) {\n      throw new ForbiddenException(`User not update succesfully`);\n    }\n    return {\n      message: 'Update Successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        prisma/seed.ts\n            \n            function\n            getRandomRoleId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        prisma/seed.ts\n            \n            variable\n            DUMMY_PASSWORD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthPayloadDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/get-me/get-me.decorator.ts\n            \n            variable\n            GetMe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/has-permission/has-permission.decorator.ts\n            \n            variable\n            HAS_PERMISSION_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorators/has-permission/has-permission.decorator.ts\n            \n            variable\n            HasPermission\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guard/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guard/only-authorized-role/only-authorized-role.guard.ts\n            \n            guard\n            OnlyAuthorizedRoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/upload/upload.interceptor.ts\n            \n            injectable\n            FileUploadInterceptor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interfaces/pagination-interface.ts\n            \n            interface\n            PaginationParmas\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/users/user-filter-interface.ts\n            \n            interface\n            UserFilterInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/interfaces/users/user-interfaces.ts\n            \n            interface\n            UserInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/strategy/jwt.strategy.ts\n            \n            interface\n            UserPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/upload/upload.controller.ts\n            \n            controller\n            UploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/users.dto.ts\n            \n            class\n            UpdateUserPayloadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/users.dto.ts\n            \n            class\n            UserPayloadDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/validators/password-policy.validation.ts\n            \n            class\n            IsPasswordPolicy\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @faker-js/faker : ^9.8.0\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/throttler : ^6.4.0\n        \n            @prisma/client : ^6.8.2\n        \n            @types/multer : ^1.4.12\n        \n            @types/passport-jwt : ^4.0.1\n        \n            argon2 : ^0.43.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            csrf-csrf : ^4.0.2\n        \n            helmet : ^8.1.0\n        \n            multer : ^2.0.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            prisma : ^6.8.2\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getRandomRoleId   (prisma/.../seed.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getRandomRoleId\n                        \n                    \n                \n            \n            \n                \ngetRandomRoleId()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nUploadModule -->\n\nUploadService->UploadModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DUMMY_PASSWORD   (prisma/.../seed.ts)\n                        \n                        \n                            GetMe   (src/.../get-me.decorator.ts)\n                        \n                        \n                            HAS_PERMISSION_KEY   (src/.../has-permission.decorator.ts)\n                        \n                        \n                            HasPermission   (src/.../has-permission.decorator.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DUMMY_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '$argon2id$v=19$m=65536,t=3,p=4$oTfBlJjwFXLyr8hj8I8LrQ$7vd6LYWLfrzgXSaWiuwXFMkrH6O9t0Jlw+/f4WwyIlQ'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/decorators/get-me/get-me.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetMe\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request: Express.Request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/decorators/has-permission/has-permission.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HAS_PERMISSION_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hasPermission'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (permission: string) =>\n  SetMetadata(HAS_PERMISSION_KEY, permission)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
